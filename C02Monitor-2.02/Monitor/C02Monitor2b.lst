  Mon Feb 11 2019 10:21                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;**************************************************************************************************
     2                        ;*    C02Monitor 2.02- Release version for Pocket SBC  (c)2013-2019 by Kevin E. Maier 01/31/2019  *
     3                        ;*                                                                                                *
     4                        ;*  Monitor Functions are divided into groups as follows:                                         *
     5                        ;*   1. Memory Operations:                                                                        *
     6                        ;*      - Fill Memory: Source, Length, Value (prompts for commit)                                 *
     7                        ;*      - Move Memory: Source, Target, Length (prompts for commit)                                *
     8                        ;*      - Compare Memory: Source, Target, Length                                                  *
     9                        ;*      - Examine/Edit: Address, Data (edit) sequential memory                                    *
    10                        ;*      - Input ASCII Text into memory: Address, Data (ESC quits)                                 *
    11                        ;*      - Hex Data Search: Hex data up to 16 bytes                                                *
    12                        ;*      - Text String Search: ASCII data up to 16 characters                                      *
    13                        ;*      - Display Memory as Hex/ASCII: Address start - 256 consecutive bytes displayed            *
    14                        ;*      - Execute from Memory: Start address                                                      *
    15                        ;*                                                                                                *
    16                        ;*   2. Register Operations:                                                                      *
    17                        ;*      - Display All Registers                                                                   *
    18                        ;*      - Display/Edit A, X, Y, Stack Pointer, Processor Status                                   *
    19                        ;*                                                                                                *
    20                        ;*   3. Timer/Counter Functions:                                                                  *
    21                        ;*      - Set delay time: 10-millisecond count and 16-bit multiplier count                        *
    22                        ;*      - Execute Millisecond Delay 1-256 times 10ms (Jiffy Clock)                                *
    23                        ;*      - Execute Millisecond Delay times 16-bit multiplier count (0-65535)                       *
    24                        ;*      - Extended Delay: up to 256 times above count                                             *
    25                        ;*      - RTC function based on 10ms Jiffy Clock: Ticks, Seconds, Minutes, Hours, Days            *
    26                        ;*      - Benchmark timing up to 65535.99 seconds with 10ms resolution                            *
    27                        ;*                                                                                                *
    28                        ;*   4. Keyboard Macro Facility:                                                                  *
    29                        ;*      - Provides up to 127 byte keyboard buffer loop capability                                 *
    30                        ;*      - Optional 16-bit Loop Counter (1-65,535)                                                 *
    31                        ;*      - Send Break command (from Terminal program) exits Macro function                         *
    32                        ;*                                                                                                *
    33                        ;*   5. Control-Key Functions:                                                                    *
    34                        ;*      - CTRL-A: Starts Assembler for simple code entry based on Mnemonics (not completed yet)   *
    35                        ;*      - CTRL-B: Starts CMOS version of Enhanced Basic Version 2.22p4C                           *
    36                        ;*      - CTRL-D: Table-Driven Disassembler - Supports Full WDC Opcodes/Addressing modes          *
    37                        ;*      - CTRL-E: Edit single byte in the EEPROM - uses BurnByte routine to ensure proper write   *
    38                        ;*      - CTRL-L: Xmodem Loader w/CRC-16 Support, auto detect S19 Records from WDC Linker         *
    39                        ;*      - CTRL-P: Program EEPROM - Source, Target, Length (Source must be RAM based)              *
    40                        ;*      - CTRL-Q: Query Commands - Shows all available Monitor functions                          *
    41                        ;*      - CTRL-R: Reset System - Initiates Cold Start of BIOS and Monitor                         *
    42                        ;*      - CTRL-S: Xmodem Save w/CRC-16 Support                                                    *
    43                        ;*      - CTRL-T: Shows Elapsed time since System Cold Start                                      *
    44                        ;*      - CTRL-V: Shows Version for BIOS and Monitor                                              *
    45                        ;*      - CTRL-Z: Zeros out ALL RAM and initiates Cold Start of BIOS and Monitor                  *
    46                        ;*                                                                                                *
    47                        ;*   6. Panic Button (NMI Support Routine)                                                        *
    48                        ;*      - Saves Page Zero, CPU Stack, Console Buffer and Vector/Config Data pages                 *
    49                        ;*      - Re-initializes Vector and Configuration Data in Page $03                                *
    50                        ;*      - Clears Console Buffer pointers in Page $00 and restarts Console only                    *
    51                        ;*      - Toggles Test Flag in SCC2691 UART - might need to invoke twice                          *
    52                        ;**************************************************************************************************
    53                                PL      66      ;Page Length
    54                                PW      132     ;Page Width (# of char/line)
    55                                CHIP    W65C02S ;Enable WDC 65C02 instructions
    56                                PASS1   OFF     ;Set ON when used for debug
    57                        ;**************************************************************************************************
  Mon Feb 11 2019 10:21                                                                                                    Page 2


    58                        ; Page Zero definitions $00 to $AF reserved for user routines
    59                        ; NOTES:- Locations $00 and $01 are used to zero RAM (calls CPU reset)
    60                        ;       - EEPROM Byte Write routine loaded into Page Zero at $90-$A4
    61                        ;
    62             000000B0   PGZERO_ST       .EQU    $B0     ;Start of Page Zero usage
    63                        ;
    64                        ;Page Zero Buffers used by the default Monitor code, Two buffers are required;
    65                        ;       DATABUFF is used by the HEX2ASC routine (6 bytes). 16-bit to ASCII decimal
    66                        ;        - note string is terminated by null character
    67                        ;       INBUFF is used for conversion from 4 HEX characters to a 16-bit address
    68                        ;       INBUFF is used by RDLINE routine (4 bytes)
    69                        ;
    70             000000B0   BUFF_PG0        .EQU    PGZERO_ST+00    ;Default Page zero location for Monitor buffers
    71                        ;
    72             000000B0   INBUFF          .EQU    BUFF_PG0+00     ;4 bytes ($B0-$B3)
    73             000000B4   DATABUFF        .EQU    BUFF_PG0+04     ;6 bytes ($B4-$B9)
    74                        ;
    75                        ;       - 16-bit variables:
    76             000000BA   HEXDATAH        .EQU    PGZERO_ST+10    ;Hexadecimal input
    77             000000BB   HEXDATAL        .EQU    PGZERO_ST+11
    78             000000BC   BINVALL         .EQU    PGZERO_ST+12    ;Binary Value for HEX2ASC
    79             000000BD   BINVALH         .EQU    PGZERO_ST+13
    80             000000BE   COMLO           .EQU    PGZERO_ST+14    ;User command address
    81             000000BF   COMHI           .EQU    PGZERO_ST+15
    82             000000C0   INDEXL          .EQU    PGZERO_ST+16    ;Index for address - multiple routines
    83             000000C1   INDEXH          .EQU    PGZERO_ST+17
    84             000000C2   TEMP1L          .EQU    PGZERO_ST+18    ;Index for word temp value used by Memdump
    85             000000C3   TEMP1H          .EQU    PGZERO_ST+19
    86             000000C4   TEMP2L          .EQU    PGZERO_ST+20    ;Index for Text entry
    87             000000C5   TEMP2H          .EQU    PGZERO_ST+21
    88             000000C6   PROMPTL         .EQU    PGZERO_ST+22    ;Prompt string address
    89             000000C7   PROMPTH         .EQU    PGZERO_ST+23
    90             000000C8   SRCL            .EQU    PGZERO_ST+24    ;Source address for memory operations
    91             000000C9   SRCH            .EQU    PGZERO_ST+25
    92             000000CA   TGTL            .EQU    PGZERO_ST+26    ;Target address for memory operations
    93             000000CB   TGTH            .EQU    PGZERO_ST+27
    94             000000CC   LENL            .EQU    PGZERO_ST+28    ;Length address for memory operations
    95             000000CD   LENH            .EQU    PGZERO_ST+29
    96                        ;
    97                        ;       - 8-bit variables and constants:
    98             000000CE   BUFIDX          .EQU    PGZERO_ST+30    ;Buffer index
    99             000000CF   BUFLEN          .EQU    PGZERO_ST+31    ;Buffer length
   100             000000D0   IDX             .EQU    PGZERO_ST+32    ;Temp Indexing
   101             000000D1   IDY             .EQU    PGZERO_ST+33    ;Temp Indexing
   102             000000D2   TEMP1           .EQU    PGZERO_ST+34    ;Temp - Code Conversion routines
   103             000000D3   TEMP2           .EQU    PGZERO_ST+35    ;Temp - Memory/EEPROM/SREC routines - Disassembler
   104             000000D4   TEMP3           .EQU    PGZERO_ST+36    ;Temp - EEPROM/SREC routines
   105             000000D5   CMDFLAG         .EQU    PGZERO_ST+37    ;Command Flag - bit specific, used by multiple routines
   106             000000D6   OPXMDM          .EQU    PGZERO_ST+38    ;Saved Opcode/Xmodem Flag variable
   107                        ;
   108                        ;       - Xmodem transfer variables
   109             000000D7   CRCHI           .EQU    PGZERO_ST+39    ;CRC hi byte  (two byte variable)
   110             000000D8   CRCLO           .EQU    PGZERO_ST+40    ;CRC lo byte - Operand in Disassembler
   111             000000D9   CRCCNT          .EQU    PGZERO_ST+41    ;CRC retry count - Operand in Disassembler
   112             000000DA   PTRL            .EQU    PGZERO_ST+42    ;Data pointer lo byte - Mnemonic in Disassembler
   113             000000DB   PTRH            .EQU    PGZERO_ST+43    ;Data pointer hi byte - Mnemonic in Disassembler
   114             000000DC   BLKNO           .EQU    PGZERO_ST+44    ;Block number
   115                        ;
   116                        ;        - Macro Loop Counter variables
   117             000000DD   LPCNTL          .EQU    PGZERO_ST+45    ;Loop Count low byte
   118             000000DE   LPCNTH          .EQU    PGZERO_ST+46    ;Loop Count high byte
   119             000000DF   SPARE_M0        .EQU    PGZERO_ST+47    ;Spare Monitor page zero byte
   120                        ;
  Mon Feb 11 2019 10:21                                                                                                    Page 3


   121                        ;       - BIOS variables, pointers, flags located at top of Page Zero.
   122             000000E0   BIOS_PG0        .EQU    PGZERO_ST+48    ;Start of BIOS page zero use ($E0-$FF)
   123                        ;
   124                        ;       - BRK handler routine
   125             000000E0   PCL             .EQU    BIOS_PG0+0      ;Program Counter Low index
   126             000000E1   PCH             .EQU    BIOS_PG0+1      ;Program Counter High index
   127             000000E2   PREG            .EQU    BIOS_PG0+2      ;Temp Status reg
   128             000000E3   SREG            .EQU    BIOS_PG0+3      ;Temp Stack ptr
   129             000000E4   YREG            .EQU    BIOS_PG0+4      ;Temp Y reg
   130             000000E5   XREG            .EQU    BIOS_PG0+5      ;Temp X reg
   131             000000E6   AREG            .EQU    BIOS_PG0+6      ;Temp A reg
   132                        ;
   133                        ;       - 2691 IRQ handler pointers and status
   134             000000E7   ICNT            .EQU    BIOS_PG0+7      ;Input buffer count
   135             000000E8   IHEAD           .EQU    BIOS_PG0+8      ;Input buffer head pointer
   136             000000E9   ITAIL           .EQU    BIOS_PG0+9      ;Input buffer tail pointer
   137             000000EA   OCNT            .EQU    BIOS_PG0+10     ;Output buffer count
   138             000000EB   OHEAD           .EQU    BIOS_PG0+11     ;Output buffer head pointer
   139             000000EC   OTAIL           .EQU    BIOS_PG0+12     ;Output buffer tail pointer
   140             000000ED   UART_IRT        .EQU    BIOS_PG0+13     ;2691 Interrupt Status byte
   141             000000EE   UART_SRT        .EQU    BIOS_PG0+14     ;2691 Status Register byte
   142                        ;
   143                        ;       - Real-Time Clock variables
   144             000000EF   TICKS           .EQU    BIOS_PG0+15     ;timer countdowns for 1 second (100)
   145             000000F0   SECS            .EQU    BIOS_PG0+16     ;Seconds: 0-59
   146             000000F1   MINS            .EQU    BIOS_PG0+17     ;Minutes: 0-59
   147             000000F2   HOURS           .EQU    BIOS_PG0+18     ;Hours: 0-23
   148             000000F3   DAYSL           .EQU    BIOS_PG0+19     ;Days: Low-Order byte 0-65535
   149             000000F4   DAYSH           .EQU    BIOS_PG0+20     ;Days: High order byte >179 Years ;-)
   150                        ;
   151                        ;       - Delay Timer variables
   152             000000F5   MSDELAY        .EQU     BIOS_PG0+21     ;Timer delay countdown byte (255 > 0)
   153             000000F6   SETMS          .EQU     BIOS_PG0+22     ;Set timeout for delay routines - BIOS use only
   154             000000F7   DELLO          .EQU     BIOS_PG0+23     ;Delay value BIOS use only
   155             000000F8   DELHI          .EQU     BIOS_PG0+24     ;Delay value BIOS use only
   156             000000F9   XDL            .EQU     BIOS_PG0+25     ;XL Delay count
   157                        ;
   158                        ;       - Count variables for 10ms benchmark timing
   159             000000FA   10MS_CNT       .EQU     BIOS_PG0+26     ;10ms Count variable
   160             000000FB   SECL_CNT       .EQU     BIOS_PG0+27     ;Seconds Low byte count
   161             000000FC   SECH_CNT       .EQU     BIOS_PG0+28     ;Second High byte count
   162                        ;
   163                        ;       - Spare BIOS bytes for future use
   164             000000FD   SPARE_B0       .EQU     BIOS_PG0+29     ;Spare BIOS page zero byte
   165             000000FE   SPARE_B1       .EQU     BIOS_PG0+30     ;Spare BIOS page zero byte
   166                        ;
   167                        ;       - Timer/Counter Match flag for Delay/Benchmark
   168             000000FF   MATCH          .EQU     BIOS_PG0+31     ;Bit7 used for Delay, Bit6 used for Benchmark
   169                        ;
   170                        ;       - Default for RTC tick count - number of IRQs for 1 second
   171             00000064   DF_TICKS       .EQU     #100            ;counter/timer is 10 milliseconds (100 x 10ms = 1 second)
   172                        ;
   173                        ;**************************************************************************************************
   174             00000300   SOFTVEC         .EQU    $0300   ;Start of soft vectors
   175                        ;The Interrupt structure is vector based. During startup, Page $03 is loaded from ROM
   176                        ; The soft vectors are structured to allow inserting additional routines either before
   177                        ; or after the core routines. This allows flexibility and changing of routine priority
   178                        ;
   179                        ;The main set of vectors occupy the first 16 bytes of Page $03. The ROM handler for
   180                        ; NMI, BRK and IRQ jump to the first 3 vectors. The following 3 vectors are loaded with
   181                        ; returns to the ROM handler for each. The following 2 vectors are the cold and warm
   182                        ; entry points for the Monitor. After the basic initialization, the Monitor is entered
   183                        ;
  Mon Feb 11 2019 10:21                                                                                                    Page 4


   184                        ;The following vector set allows inserts, pre or post for NMI/BRK/IRQ. There a total of 8 inserts
   185                        ; which occupy 16 bytes. They can be used as required. Currently, all of these are available.
   186                        ;
   187             00000300   NMIVEC0         .EQU    SOFTVEC+0       ;NMI Interrupt Vector 0
   188             00000302   BRKVEC0         .EQU    SOFTVEC+2       ;BRK Interrupt Vector 0
   189             00000304   IRQVEC0         .EQU    SOFTVEC+4       ;INTERRUPT VECTOR 0
   190                        ;
   191             00000306   NMIRTVEC0       .EQU    SOFTVEC+6       ;NMI Return Handler 0
   192             00000308   BRKRTVEC0       .EQU    SOFTVEC+8       ;BRK Return Handler 0
   193             0000030A   IRQRTVEC0       .EQU    SOFTVEC+10      ;IRQ Return Handler 0
   194                        ;
   195             0000030C   CLDMNVEC0       .EQU    SOFTVEC+12      ;Cold Monitor Entry Vector 0
   196             0000030E   WRMMNVEC0       .EQU    SOFTVEC+14      ;Warm Monitor Entry Vector 0
   197                        ;
   198             00000310   VECINSRT0       .EQU    SOFTVEC+16      ;1st Vector Insert
   199             00000312   VECINSRT1       .EQU    SOFTVEC+18      ;2nd Vector Insert
   200             00000314   VECINSRT2       .EQU    SOFTVEC+20      ;3rd Vector Insert
   201             00000316   VECINSRT3       .EQU    SOFTVEC+22      ;4th Vector Insert
   202             00000318   VECINSRT4       .EQU    SOFTVEC+24      ;5th Vector Insert
   203             0000031A   VECINSRT5       .EQU    SOFTVEC+26      ;6th Vector Insert
   204             0000031C   VECINSRT6       .EQU    SOFTVEC+28      ;7th Vector Insert
   205             0000031E   VECINSRT7       .EQU    SOFTVEC+30      ;8th Vector Insert
   206                        ;
   207                        ;**************************************************************************************************
   208                        ;Search Buffer is 16 bytes in length. Used to hold search string for text or hex data
   209             00000340   SRCHBUFF        .EQU    $340    ;Located in Page $03 following HW config data
   210                        ;
   211                        ;Xmodem/CRC Loader also provides Motorola S19 Record sense and load. Designed to handle the S19
   212                        ; records from the WDC Assembler/Linker package. This requires a 44 byte buffer to parse each valid
   213                        ; S1 record, located just before the 132 Byte Xmodem frame buffer. Total Buffer space for the
   214                        ; Xmodem/CRC Loader is 176 bytes
   215                        ;
   216                        ;Valid S-record headers are "S1" and "S9"/ For S1, the maximum length is "19" hex. The last S1
   217                        ; record can be less. S9 record is always the last record with no data. WDC Linker also appends
   218                        ; a CR/LF to the end of each record for a total 44 bytes.
   219             00000350   SRBUFF          .EQU    $0350   ;Start of Motorola S-Record buffer, up to 44 bytes in length
   220                        ;
   221                        ;Xmodem frame buffer. The entire Xmodem frame is buffered here and then checked for proper header
   222                        ; and frame number, CRC-16 on the data, then moved to user RAM.
   223             0000037C   RBUFF           .EQU    $037C   ;Xmodem temp 132 byte receive buffer
   224                        ;
   225                        ;Page $03 is completely allocated for Buffers, Config Data and Vector pointers. Much of this can
   226                        ; be used as temporary buffer space as needed provided the Monitor functions that required are
   227                        ; not being used concurrently.
   228                        ;
   229                        ;XMODEM Control Character Constants
   230             00000001   SOH             .EQU    $01     ;Start of Block Header
   231             00000004   EOT             .EQU    $04     ;End of Text marker
   232             00000006   ACK             .EQU    $06     ;Good Block Acknowledge
   233             00000015   NAK             .EQU    $15     ;Bad Block acknowledged
   234             00000018   CAN             .EQU    $18     ;Cancel character
   235                        ;
   236             0000FFD0   BIOS_MSG        .EQU    $FFD0   ;BIOS Startup Message is hard-coded here
   237                        ;**************************************************************************************************
   238                        ; RAM location used for the EEPROM Byte Write routine
   239                        ; location moved from $00 to $90 to avoid conflict with EhBasic Page 0 usage
   240                        ;
   241             00000090   BURN_BYTE       .EQU    $0090   ;Location in Page 0 RAM for EEPROM BYTE write routine
   242                        ;**************************************************************************************************
   243                        ; The following 32 functions are provided by BIOS via the JMP Table below
   244                        ; $FF00 - $FF2D are Reserved for future expansion
   245                        ;
   246                        ; $FF30 CNT_STRT          ;(reset/start benchmark counter)
  Mon Feb 11 2019 10:21                                                                                                    Page 5


   247                        ; $FF33 CNT_STOP          ;(stop benchmark counter)
   248                        ; $FF36 CHRIN_NW          ;(character input from console, no waiting, clear carry if none)
   249                        ; $FF39 CHRIN             ;(character input from console, carry set if character)
   250                        ; $FF3C CHROUT            ;(character output to console, sent character preserved)
   251                        ; $FF3F SET_DLY           ;(set delay value for milliseconds and 16-bit counter)
   252                        ; $FF42 EXE_MSDLY         ;(execute millisecond delay 1-256 * 10 milliseconds)
   253                        ; $FF45 EXE_LGDLY         ;(execute long delay; millisecond delay * 16-bit count)
   254                        ; $FF48 EXE_XLDLY         ;(execute extra long delay; 8-bit count * long delay)
   255                        ; $FF4B INIT_VEC          ;(initialize soft vectors at $0300 from ROM)
   256                        ; $FF4E INIT_CFG          ;(initialize soft config values at $0320 from ROM)
   257                        ; $FF51 INIT_2691         ;(initialize SCC2691 console 38.4K, 8-N-1 RTS/CTS)
   258                        ; $FF54 RESET_2691        ;(reset SCC2691) - called before INIT_2691
   259                        ; $FF57 MON_WARM          ;(Monitor warm start - jumps to page $03)
   260                        ; $FF5A MON_COLD          ;(Monitor cold start - jumps to page $03)
   261                        ; $FF5D COLDSTRT          ;(System cold start - RESET vector for 65C02)
   262                        ;
   263                        ;**************************************************************************************************
   264                        ;BIOS JUMP Table starts here:
   265                        ;       - BIOS calls are listed below - total of 32
   266                        ;       - Reserved calls are for future hardware support
   267                        ;
   268             0000FF00   B_Reserve00     .EQU    $FF00   ;Call 00
   269             0000FF03   B_Reserve01     .EQU    $FF03   ;Call 01
   270             0000FF06   B_Reserve02     .EQU    $FF06   ;Call 02
   271             0000FF09   B_Reserve03     .EQU    $FF09   ;Call 03
   272             0000FF0C   B_Reserve04     .EQU    $FF0C   ;Call 04
   273             0000FF0F   B_Reserve05     .EQU    $FF0F   ;Call 05
   274             0000FF12   B_Reserve06     .EQU    $FF12   ;Call 06
   275             0000FF15   B_Reserve07     .EQU    $FF15   ;Call 07
   276             0000FF18   B_Reserve08     .EQU    $FF18   ;Call 08
   277             0000FF1B   B_Reserve09     .EQU    $FF1B   ;Call 09
   278             0000FF1E   B_Reserve10     .EQU    $FF1E   ;Call 10
   279             0000FF21   B_Reserve11     .EQU    $FF21   ;Call 11
   280             0000FF24   B_Reserve12     .EQU    $FF24   ;Call 12
   281             0000FF27   B_Reserve13     .EQU    $FF27   ;Call 13
   282             0000FF2A   B_Reserve14     .EQU    $FF2A   ;Call 14
   283             0000FF2D   B_Reserve15     .EQU    $FF2D   ;Call 15
   284                        ;
   285             0000FF30   B_CNT_STRT      .EQU    $FF30   ;Call 16
   286             0000FF33   B_CNT_STOP      .EQU    $FF33   ;Call 17
   287                        ;
   288             0000FF36   B_CHRIN_NW      .EQU    $FF36   ;Call 18
   289             0000FF39   B_CHRIN         .EQU    $FF39   ;Call 19
   290             0000FF3C   B_CHROUT        .EQU    $FF3C   ;Call 20
   291                        ;
   292             0000FF3F   B_SET_DLY       .EQU    $FF3F   ;Call 21
   293             0000FF42   B_EXE_MSDLY     .EQU    $FF42   ;Call 22
   294             0000FF45   B_EXE_LGDLY     .EQU    $FF45   ;Call 23
   295             0000FF48   B_EXE_XLDLY     .EQU    $FF48   ;Call 24
   296                        ;
   297             0000FF4B   B_INIT_VEC      .EQU    $FF4B   ;Call 25
   298             0000FF4E   B_INIT_CFG      .EQU    $FF4E   ;Call 26
   299             0000FF51   B_INIT_2691     .EQU    $FF51   ;Call 27
   300             0000FF54   B_RESET_2691    .EQU    $FF54   ;Call 28
   301                        ;
   302             0000FF57   B_WRMMNVEC0     .EQU    $FF57   ;Call 29
   303             0000FF5A   B_CLDMNVEC0     .EQU    $FF5A   ;Call 30
   304             0000FF5D   B_COLDSTRT      .EQU    $FF5D   ;Call 31
   305                        ;
   306                        ;**************************************************************************************************
   307                                .ORG $E000    ;6KB reserved for Monitor $E000 through $F7FF
   308                        ;**************************************************************************************************
   309                        ;        Monitor JUMP table - 32 JUMP calls are available
  Mon Feb 11 2019 10:21                                                                                                    Page 6


   310                        ;
   311 00:E000: 4C 60 E0     M_COLD_MON      JMP     COLD_MON        ;Call 0
   312 00:E003: 4C 65 E0     M_WARM_MON      JMP     WARM_MON        ;Call 1
   313                        ;
   314 00:E006: 4C 9D E0     M_RESERVE2      JMP     RESERVED        ;Call 2
   315 00:E009: 4C 9D E0     M_RESERVE3      JMP     RESERVED        ;Call 3
   316 00:E00C: 4C 9D E0     M_RESERVE4      JMP     RESERVED        ;Call 4
   317 00:E00F: 4C 9D E0     M_RESERVE5      JMP     RESERVED        ;Call 5
   318                        ;
   319 00:E012: 4C B0 E8     M_XMDM_SAVE     JMP     XMDM_SAVE       ;Call 6
   320 00:E015: 4C 8C E9     M_XMDM_LOAD     JMP     XMDM_LOAD       ;Call 7
   321 00:E018: 4C BA E2     M_BENCH         JMP     BENCH           ;Call 8
   322 00:E01B: 4C C5 E2     M_QUITB         JMP     QUITB           ;Call 9
   323 00:E01E: 4C 6F E8     M_UPTIME        JMP     UPTIME          ;Call 10
   324 00:E021: 4C B5 E5     M_PRSTAT1       JMP     PRSTAT1         ;Call 11
   325 00:E024: 4C 7F E6     M_DIS_LINE      JMP     DIS_LINE        ;Call 12
   326 00:E027: 4C 71 E1     M_INCINDEX      JMP     INCINDEX        ;Call 13
   327 00:E02A: 4C 68 E1     M_DECINDEX      JMP     DECINDEX        ;Call 14
   328 00:E02D: 4C E6 E1     M_RDLINE        JMP     RDLINE          ;Call 15
   329 00:E030: 4C 2A E2     M_RDCHAR        JMP     RDCHAR          ;Call 16
   330 00:E033: 4C 20 E1     M_HEXIN2        JMP     HEXIN2          ;Call 17
   331 00:E036: 4C 13 E1     M_HEXIN4        JMP     HEXIN4          ;Call 18
   332 00:E039: 4C D8 E0     M_HEX2ASC       JMP     HEX2ASC         ;Call 19
   333 00:E03C: 4C A8 E0     M_BIN2ASC       JMP     BIN2ASC         ;Call 20
   334 00:E03F: 4C 8E E0     M_ASC2BIN       JMP     ASC2BIN         ;Call 21
   335 00:E042: 4C 78 E1     M_BEEP          JMP     BEEP            ;Call 22
   336 00:E045: 4C 9B E1     M_DOLLAR        JMP     DOLLAR          ;Call 23
   337 00:E048: 4C A3 E1     M_CROUT         JMP     CROUT           ;Call 24
   338 00:E04B: 4C 96 E1     M_SPC           JMP     SPC             ;Call 25
   339 00:E04E: 4C C8 E1     M_PRBYTE        JMP     PRBYTE          ;Call 26
   340 00:E051: 4C DE E1     M_PRWORD        JMP     PRWORD          ;Call 27
   341 00:E054: 4C BB E1     M_PRASC         JMP     PRASC           ;Call 28
   342 00:E057: 4C 54 E8     M_PROMPT        JMP     PROMPT          ;Call 29
   343 00:E05A: 4C 4C E8     M_PROMPTR       JMP     PROMPTR         ;Call 30
   344 00:E05D: 4C 34 E2     M_CONTINUE      JMP     CONTINUE        ;Call 31
   345                        ;
   346                        ;START OF MONITOR CODE
   347                        ;*******************************************
   348                        ;*  This is the Monitor Cold start vector  *
   349                        ;*******************************************
   350 00:E060: A9 14        COLD_MON        LDA     #$14            ;Get intro msg / BEEP
   351 00:E062: 20 54 E8                     JSR     PROMPT          ;Send to Console
   352                        ;
   353                        ;*******************************************
   354                        ;*           Command input loop            *
   355                        ;*******************************************
   356                        ;*  This is the Monitor Warm start vector  *
   357                        ;*******************************************
   358 00:E065: A2 FF        WARM_MON        LDX     #$FF            ;Initialize Stack pointer
   359 00:E067: 9A                           TXS                     ;Xfer to stack
   360 00:E068: 77 D5                        RMB7    CMDFLAG         ;Clear bit7 of command flag
   361 00:E06A: A9 16                        LDA     #$16            ;Get prompt msg
   362 00:E06C: 20 54 E8                     JSR     PROMPT          ;Send to terminal
   363                        ;
   364 00:E06F: 20 2A E2     CMON            JSR     RDCHAR          ;Wait for keystroke (converts to upper-case)
   365 00:E072: A2 22                        LDX     #MONTAB-MONCMD-1 ;Get command list count
   366 00:E074: DD 71 EB     CMD_LP          CMP     MONCMD,X        ;Compare to command list
   367 00:E077: D0 0D                        BNE     CMD_DEC         ;Check for next command and loop
   368 00:E079: 48                           PHA                     ;Save keystroke
   369 00:E07A: 8A                           TXA                     ;Xfer Command index to A reg
   370 00:E07B: 0A                           ASL     A               ;Multiply keystroke value by 2
   371 00:E07C: AA                           TAX                     ;Get Monitor command processor address from table MONTAB
   372 00:E07D: 68                           PLA                     ;Restore keystroke (some commands send to terminal)
  Mon Feb 11 2019 10:21                                                                                                    Page 7


   373 00:E07E: 20 83 E0                     JSR     DOCMD           ;Call Monitor command processor as a subroutine
   374 00:E081: 80 E2                        BRA     WARM_MON        ;Command processed, branch and wait for next command
   375 00:E083: 7C 94 EB     DOCMD           JMP     (MONTAB,X)      ;Execute CMD from Table
   376                        ;
   377 00:E086: CA           CMD_DEC         DEX                     ;Decrement index count
   378 00:E087: 10 EB                        BPL     CMD_LP          ;If more to check, loop back
   379 00:E089: 20 78 E1                     JSR     BEEP            ;Beep for error,
   380 00:E08C: 80 E1                        BRA     CMON            ;re-enter Monitor
   381                        ;
   382                        ;***********************************************
   383                        ;* Basic Subroutines used by multiple routines *
   384                        ;***********************************************
   385                        ;
   386                        ;ASC2BIN subroutine: Convert 2 ASCII HEX digits to a binary (byte) value
   387                        ; Enter: A register = high digit, Y register = low digit
   388                        ; Return: A register = binary value
   389 00:E08E: 20 9E E0     ASC2BIN         JSR     BINARY          ;Convert high digit to 4-bit nibble
   390 00:E091: 0A                           ASL     A               ;Shift to high nibble
   391 00:E092: 0A                           ASL     A
   392 00:E093: 0A                           ASL     A
   393 00:E094: 0A                           ASL     A
   394 00:E095: 85 D2                        STA     TEMP1           ;Store it in temp area
   395 00:E097: 98                           TYA                     ;Get Low digit
   396 00:E098: 20 9E E0                     JSR     BINARY          ;Convert low digit to 4-bit nibble
   397 00:E09B: 05 D2                        ORA     TEMP1           ;OR in the high nibble
   398 00:E09D: 60           RESERVED        RTS                     ;Return to caller
   399                        ;
   400 00:E09E: 38           BINARY          SEC                     ;Set carry for subtraction
   401 00:E09F: E9 30                        SBC     #$30            ;Subtract $30 from ASCII HEX digit
   402 00:E0A1: C9 0A                        CMP     #$0A            ;Check for result < 10
   403 00:E0A3: 90 02                        BCC     BNOK            ;Branch if 0-9
   404 00:E0A5: E9 07                        SBC     #$07            ;Else, subtract 7 for A-F
   405 00:E0A7: 60           BNOK            RTS                     ;Return to caller
   406                        ;
   407                        ;BIN2ASC subroutine: Convert single byte to two ASCII HEX digits
   408                        ; Enter: A register contains byte value to convert
   409                        ; Return: A register = high digit, Y register = low digit
   410 00:E0A8: 48           BIN2ASC         PHA                     ;Save A Reg on stack
   411 00:E0A9: 29 0F                        AND     #$0F            ;Mask off high nibble
   412 00:E0AB: 20 B4 E0                     JSR     ASCII           ;Convert nibble to ASCII HEX digit
   413 00:E0AE: A8                           TAY                     ;Move to Y Reg
   414 00:E0AF: 68                           PLA                     ;Get character back from stack
   415 00:E0B0: 4A                           LSR     A               ;Shift high nibble to lower 4 bits
   416 00:E0B1: 4A                           LSR     A
   417 00:E0B2: 4A                           LSR     A
   418 00:E0B3: 4A                           LSR     A
   419                        ;
   420 00:E0B4: C9 0A        ASCII           CMP     #$0A            ;Check for 10 or less
   421 00:E0B6: 90 03                        BCC     ASOK            ;Branch if less than 10
   422 00:E0B8: 18                           CLC                     ;Clear carry for addition
   423 00:E0B9: 69 07                        ADC     #$07            ;Add $07 for A-F
   424 00:E0BB: 69 30        ASOK            ADC     #$30            ;Add $30 for ASCII
   425 00:E0BD: 60                           RTS                     ;Return to caller
   426                        ;
   427                        ;HEX8ASC - Accepts 8-bit Hexadecimal value (00-99 decimal) and converts to ASCII numeric values.
   428                        ; A register contain the single byte value on entry and outputs the two ASCII numeric values.
   429                        ; leading zero is output as it is used for showing hundredths of a second after a decimal point.
   430 00:E0BE: A0 FF        HEX8ASC         LDY     #$FF            ;Load Y reg with "-1"
   431 00:E0C0: 38                           SEC                     ;Set carry for subtraction
   432 00:E0C1: C8           HEX8LP1         INY                     ;Increment 10's count (starts at zero)
   433 00:E0C2: E9 0A                        SBC     #10             ;Subtract 10 decimal
   434 00:E0C4: B0 FB                        BCS     HEX8LP1         ;Branch back if >10
   435 00:E0C6: 69 0A                        ADC     #10             ;Add the last 10 back
  Mon Feb 11 2019 10:21                                                                                                    Page 8


   436 00:E0C8: 85 D2                        STA     TEMP1           ;Save the 1's count
   437 00:E0CA: 98                           TYA                     ;Get the 10's count
   438 00:E0CB: 18                           CLC                     ;Clear carry for add
   439 00:E0CC: 69 30                        ADC     #$30            ;Add $30 for ASCII digit
   440 00:E0CE: 20 3C FF                     JSR     B_CHROUT        ;Print the first digit
   441 00:E0D1: A5 D2                        LDA     TEMP1           ;Get the 1's count
   442 00:E0D3: 69 30                        ADC     #$30            ;Add $30 for ASCII digit
   443 00:E0D5: 4C 3C FF                     JMP     B_CHROUT        ;Print the second digit, return
   444                        ;
   445                        ;HEX2ASC - Accepts 16-bit Hexadecimal value and converts to an ASCII decimal string. Input is
   446                        ; via the A and Y registers and output is up to 5 ASCII digits in DATABUFF. The High Byte is in
   447                        ; the Y Register and Low Byte is in the A register. Output data is placed in variable DATABUFF
   448                        ; and terminated with a null character. PROMPTR routine is used to print the ASCII decimal value.
   449                        ; Routine based on Michael Barry's code. Saved many bytes ;-)
   450 00:E0D8: 85 BC        HEX2ASC         STA     BINVALL         ;Save Low byte
   451 00:E0DA: 84 BD                        STY     BINVALH         ;Save High byte
   452 00:E0DC: A2 05                        LDX     #5              ;Get ASCII buffer offset
   453 00:E0DE: 74 B4                        STZ     DATABUFF,X      ;Zero last buffer byte for null end
   454                        ;
   455 00:E0E0: A9 00        CNVERT          LDA     #$00            ;Clear remainder
   456 00:E0E2: A0 10                        LDY     #16             ;Set loop count for 16-bits
   457                        ;
   458 00:E0E4: C9 05        DVLOOP          CMP     #$05            ;Partial remainder >= 10/2
   459 00:E0E6: 90 02                        BCC     DVLOOP2         ;Branch if less
   460 00:E0E8: E9 05                        SBC     #$05            ;Update partial, set carry
   461                        ;
   462 00:E0EA: 26 BC        DVLOOP2         ROL     BINVALL         ;Shift carry into dividend
   463 00:E0EC: 26 BD                        ROL     BINVALH         ;Which will be quotient
   464 00:E0EE: 2A                           ROL     A               ;Rotate A reg
   465 00:E0EF: 88                           DEY                     ;Decrement count
   466 00:E0F0: D0 F2                        BNE     DVLOOP          ;Branch back until done
   467 00:E0F2: 09 30                        ORA     #$30            ;Or in bits for ASCII
   468                        ;
   469 00:E0F4: CA                           DEX                     ;Decrement buffer index
   470 00:E0F5: 95 B4                        STA     DATABUFF,X      ;Store value into buffer
   471                        ;
   472 00:E0F7: A5 BC                        LDA     BINVALL         ;Get the Low byte
   473 00:E0F9: 05 BD                        ORA     BINVALH         ;OR in the High byte (check for zero)
   474 00:E0FB: D0 E3                        BNE     CNVERT          ;Branch back until done
   475 00:E0FD: 86 D2                        STX     TEMP1           ;Save buffer offset
   476                        ;
   477                        ;Conversion is complete, get the string address, add offset, then call prompt routine and return
   478                        ; note DATABUFF is fixed location in Page 0, carry flag need not be cleared as result can never
   479                        ; set flag after ADC instruction, Y Reg always zero
   480 00:E0FF: A9 B4                        LDA     #<DATABUFF      ;Get Low byte Address
   481 00:E101: 65 D2                        ADC     TEMP1           ;Add in buffer offset (no leading zeros)
   482 00:E103: A0 00                        LDY     #>DATABUFF      ;Get High byte address
   483 00:E105: 4C 4C E8                     JMP     PROMPTR         ;Send to terminal and return
   484                        ;
   485                        ;SETUP subroutine: Request HEX address input from terminal
   486 00:E108: 20 3C FF     SETUP           JSR     B_CHROUT        ;Send command keystroke to terminal
   487 00:E10B: 20 96 E1                     JSR     SPC             ;Send [SPACE] to terminal
   488 00:E10E: 80 03                        BRA     HEXIN4          ;Request a 0-4 digit HEX address input from terminal
   489                        ;
   490                        ;HEX input subroutines: Request 1 to 4 ASCII HEX digits from terminal, then convert digits into
   491                        ; a binary value. For 1 to 4 digits entered, HEXDATAH and HEXDATAL contain the output.
   492                        ; Variable BUFIDX will contain the number of digits entered
   493                        ; HEXIN2 - returns value in A reg and Y reg only (Y reg always $00)
   494                        ; HEXIN4 - returns values in A reg, Y reg and INDEXL/INDEXH
   495                        ; HEX2 - Prints MSG# in A reg then calls HEXIN2, HEX4 - Prints MSG# in A reg then calls HEXIN4
   496 00:E110: 20 54 E8     HEX4            JSR     PROMPT          ;Print MSG # from A reg
   497 00:E113: A2 04        HEXIN4          LDX     #$04            ;Set for number of characters allowed
   498 00:E115: 20 22 E1                     JSR     HEXINPUT        ;Convert digits
  Mon Feb 11 2019 10:21                                                                                                    Page 9


   499 00:E118: 84 C1                        STY     INDEXH          ;Store to INDEXH
   500 00:E11A: 85 C0                        STA     INDEXL          ;Store to INDEXL
   501 00:E11C: 60                           RTS                     ;Return to caller
   502                        ;
   503 00:E11D: 20 54 E8     HEX2            JSR     PROMPT          ;Print MSG # from A reg
   504 00:E120: A2 02        HEXIN2          LDX     #$02            ;Set for number of characters allowed
   505                        ;
   506                        ;HEXINPUT subroutine: request 1 to 4 HEX digits from terminal, then convert ASCII HEX to HEX
   507                        ; Setup RDLINE subroutine parameters:
   508 00:E122: 20 9B E1     HEXINPUT        JSR     DOLLAR          ;Send "$" to console
   509 00:E125: 20 E6 E1                     JSR     RDLINE          ;Request ASCII HEX input from terminal
   510 00:E128: F0 28                        BEQ     HINEXIT         ;Exit if none (Z flag already set)
   511 00:E12A: 64 BA                        STZ     HEXDATAH        ;Clear Upper HEX byte
   512 00:E12C: 64 BB                        STZ     HEXDATAL        ;Clear Lower HEX byte
   513 00:E12E: A0 02                        LDY     #$02            ;Set index for 2 bytes
   514 00:E130: 5A           ASCLOOP         PHY                     ;Save it to stack
   515 00:E131: B5 AF                        LDA     INBUFF-1,X      ;Read ASCII digit from buffer
   516 00:E133: A8                           TAY                     ;Xfer to Y Reg (LSD)
   517 00:E134: CA                           DEX                     ;Decrement input count
   518 00:E135: F0 04                        BEQ     NO_UPNB         ;Branch if no upper nibble
   519 00:E137: B5 AF                        LDA     INBUFF-1,X      ;Read ASCII digit from buffer
   520 00:E139: 80 02                        BRA     DO_UPNB         ;Branch to include upper nibble
   521 00:E13B: A9 30        NO_UPNB         LDA     #$30            ;Load ASCII "0" (MSD)
   522 00:E13D: 20 8E E0     DO_UPNB         JSR     ASC2BIN         ;Convert ASCII digits to binary value
   523 00:E140: 7A                           PLY                     ;Get index from stack
   524 00:E141: 99 B9 00                     STA     HEXDATAH-1,Y    ;Write byte to indexed buffer location
   525 00:E144: E0 00                        CPX     #$00            ;Any more digits?
   526 00:E146: F0 04                        BEQ     HINDONE         ;If not, exit
   527 00:E148: 88                           DEY                     ;Else, decrement to next byte set
   528 00:E149: CA                           DEX                     ;Decrement index count
   529 00:E14A: D0 E4                        BNE     ASCLOOP         ;Loop back for next byte
   530 00:E14C: A4 BA        HINDONE         LDY     HEXDATAH        ;Get High Byte
   531 00:E14E: A5 BB                        LDA     HEXDATAL        ;Get Low Byte
   532 00:E150: A6 CE                        LDX     BUFIDX          ;Get input count (Z flag)
   533 00:E152: 60           HINEXIT         RTS                     ;And return to caller
   534                        ;
   535                        ;Routines to update pointers for memory operations. UPD_STL subroutine: Increments Source
   536                        ; and Target pointers. UPD_TL subroutine: Increments Target pointers only, then drops into
   537                        ; decrement Length pointer. Used by multiple Memory operation commands.
   538 00:E153: E6 C8        UPD_STL         INC     SRCL            ;Increment source low byte
   539 00:E155: D0 02                        BNE     UPD_TL          ;Check for rollover
   540 00:E157: E6 C9                        INC     SRCH            ;Increment source high byte
   541 00:E159: E6 CA        UPD_TL          INC     TGTL            ;Increment target low byte
   542 00:E15B: D0 02                        BNE     DECLEN          ;Check for rollover
   543 00:E15D: E6 CB                        INC     TGTH            ;Increment target high byte
   544                        ;
   545                        ;DECLEN subroutine: decrement 16-bit variable LENL/LENH
   546 00:E15F: A5 CC        DECLEN          LDA     LENL            ;Get length low byte
   547 00:E161: D0 02                        BNE     SKP_LENH        ;Test for LENL = zero
   548 00:E163: C6 CD                        DEC     LENH            ;Else decrement length high byte
   549 00:E165: C6 CC        SKP_LENH        DEC     LENL            ;Decrement length low byte
   550 00:E167: 60                           RTS                     ;Return to caller
   551                        ;
   552                        ;DECINDEX subroutine: decrement 16 bit variable INDEXL/INDEXH
   553 00:E168: A5 C0        DECINDEX        LDA     INDEXL          ;Get index low byte
   554 00:E16A: D0 02                        BNE     SKP_IDXH        ;Test for INDEXL = zero
   555 00:E16C: C6 C1                        DEC     INDEXH          ;Decrement index high byte
   556 00:E16E: C6 C0        SKP_IDXH        DEC     INDEXL          ;Decrement index low byte
   557 00:E170: 60                           RTS                     ;Return to caller
   558                        ;
   559                        ;INCINDEX subroutine: increment 16 bit variable INDEXL/INDEXH
   560 00:E171: E6 C0        INCINDEX        INC     INDEXL          ;Increment index low byte
   561 00:E173: D0 02                        BNE     SKP_IDX         ;If not zero, skip high byte
  Mon Feb 11 2019 10:21                                                                                                    Page 10


   562 00:E175: E6 C1                        INC     INDEXH          ;Increment index high byte
   563 00:E177: 60           SKP_IDX         RTS                     ;Return to caller
   564                        ;
   565                        ;Output routines for formatting, backspace, CR/LF, BEEP, etc.
   566                        ; all routines preserve the A reg on exit.
   567                        ;
   568                        ;BEEP subroutine: Send ASCII [BELL] to terminal
   569 00:E178: 48           BEEP            PHA                     ;Save A reg on Stack
   570 00:E179: A9 07                        LDA     #$07            ;Get ASCII [BELL] to terminal
   571 00:E17B: 80 2E                        BRA     SENDIT          ;Branch to send
   572                        ;
   573                        ;BSOUT subroutine: send a Backspace to terminal
   574 00:E17D: 20 83 E1     BSOUT           JSR     BSOUT2          ;Send an ASCII backspace
   575 00:E180: 20 96 E1                     JSR     SPC             ;Send space to clear out character
   576 00:E183: 48           BSOUT2          PHA                     ;Save character in A reg
   577 00:E184: A9 08                        LDA     #$08            ;Send another Backspace to return
   578 00:E186: 80 23        BRCHOUT         BRA     SENDIT          ;Branch to send
   579                        ;
   580 00:E188: 20 83 E1     BSOUT3T         JSR     BSOUT2          ;Send a Backspace 3 times
   581 00:E18B: 20 83 E1     BSOUT2T         JSR     BSOUT2          ;Send a Backspace 2 times
   582 00:E18E: 80 F3                        BRA     BSOUT2          ;Send a Backspace and return
   583                        ;
   584                        ;SPC subroutines: Send a Space to terminal 1,2 or 4 times
   585 00:E190: 20 93 E1     SPC4            JSR     SPC2            ;Send 4 Spaces to terminal
   586 00:E193: 20 96 E1     SPC2            JSR     SPC             ;Send 2 Spaces to terminal
   587 00:E196: 48           SPC             PHA                     ;Save character in A reg
   588 00:E197: A9 20                        LDA     #$20            ;Get ASCII Space
   589 00:E199: 80 10                        BRA     SENDIT          ;Branch to send
   590                        ;
   591                        ;DOLLAR subroutine: Send "$" to terminal
   592 00:E19B: 48           DOLLAR          PHA                     ;Save A reg on STACK
   593 00:E19C: A9 24                        LDA     #$24            ;Get ASCII "$"
   594 00:E19E: 80 0B                        BRA     SENDIT          ;Branch to send
   595                        ;
   596                        ;Send CR/LF to terminal
   597 00:E1A0: 20 A3 E1     CR2             JSR     CROUT           ;Send CR/LF to terminal
   598 00:E1A3: 48           CROUT           PHA                     ;Save A reg
   599 00:E1A4: A9 0D                        LDA     #$0D            ;Get ASCII Return
   600 00:E1A6: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
   601 00:E1A9: A9 0A                        LDA     #$0A            ;Get ASCII Linefeed
   602 00:E1AB: 20 3C FF     SENDIT          JSR     B_CHROUT        ;Send to terminal
   603 00:E1AE: 68                           PLA                     ;Restore A reg
   604 00:E1AF: 60                           RTS                     ;Return to caller
   605                        ;
   606                        ;GLINE subroutine: Send a horizontal line to console used by memory display only.
   607 00:E1B0: A2 4F        GLINE           LDX     #$4F            ;Load index for 79 decimal
   608 00:E1B2: A9 7E                        LDA     #$7E            ;Get "~" character
   609 00:E1B4: 20 3C FF     GLINEL          JSR     B_CHROUT        ;Send to terminal (draw a line)
   610 00:E1B7: CA                           DEX                     ;Decrement count
   611 00:E1B8: D0 FA                        BNE     GLINEL          ;Branch back until done
   612 00:E1BA: 60                           RTS                     ;Return to caller
   613                        ;
   614                        ;Routines to output 8/16-bit Binary Data and Ascii characters
   615                        ; PRASC subroutine: Print A-reg as ASCII (Printable ASCII values = $20 - $7E), else print "."
   616 00:E1BB: C9 7F        PRASC           CMP     #$7F            ;Check for first 128
   617 00:E1BD: B0 04                        BCS     PERIOD          ;If = or higher, branch
   618 00:E1BF: C9 20                        CMP     #$20            ;Check for control characters
   619 00:E1C1: B0 02                        BCS     ASCOUT          ;If space or higher, branch and print
   620 00:E1C3: A9 2E        PERIOD          LDA     #$2E            ;Else, print a "."
   621 00:E1C5: 4C 3C FF     ASCOUT          JMP     B_CHROUT        ;Send byte in A-Reg, then return
   622                        ;
   623                        ;PRBYTE subroutine: Converts a single Byte to 2 HEX ASCII characters and sends to console on
   624                        ; entry, A reg contains the Byte to convert/send. Register contents are preserved on entry/exit.
  Mon Feb 11 2019 10:21                                                                                                    Page 11


   625 00:E1C8: 48           PRBYTE          PHA                     ;Save A register
   626 00:E1C9: 5A                           PHY                     ;Save Y register
   627 00:E1CA: 20 A8 E0     PRBYT2          JSR     BIN2ASC         ;Convert A reg to 2 ASCII Hex characters
   628 00:E1CD: 20 3C FF                     JSR     B_CHROUT        ;Print high nibble from A reg
   629 00:E1D0: 98                           TYA                     ;Transfer low nibble to A reg
   630 00:E1D1: 20 3C FF                     JSR     B_CHROUT        ;Print low nibble from A reg
   631 00:E1D4: 7A                           PLY                     ;Restore Y Register
   632 00:E1D5: 68                           PLA                     ;Restore A Register
   633 00:E1D6: 60                           RTS                     ;And return to caller
   634                        ;
   635                        ;PRINDEX subroutine: Prints a $ sign followed by INDEXH/L
   636 00:E1D7: 20 9B E1     PRINDEX         JSR     DOLLAR          ;Print a $ sign
   637 00:E1DA: A5 C1                        LDA     INDEXH          ;Get Index high byte
   638 00:E1DC: A4 C0                        LDY     INDEXL          ;Get Index low byte
   639                        ;
   640                        ;PRWORD subroutine: Converts a 16-bit word to 4 HEX ASCII characters and sends to console. On
   641                        ; entry, A reg contains High Byte, Y reg contains Low Byte. Register are preserved on entry/exit.
   642 00:E1DE: 48           PRWORD          PHA                     ;Save A register
   643 00:E1DF: 5A                           PHY                     ;Save Y register
   644 00:E1E0: 20 C8 E1                     JSR     PRBYTE          ;Convert and print one HEX character (00-FF)
   645 00:E1E3: 98                           TYA                     ;Get Low byte value
   646 00:E1E4: 80 E4                        BRA     PRBYT2          ;Finish up Low Byte and exit
   647                        ;
   648                        ;RDLINE subroutine: Store keystrokes in buffer until [RETURN] key it struck
   649                        ; Used only for Hex entry, so only (0-9,A-F) are accepted entries. Lower-case alpha characters
   650                        ; are converted to upper-case. On entry, X reg = buffer length. On exit, X reg = buffer count
   651                        ; [BACKSPACE] key removes keystrokes from buffer. [ESCAPE] key aborts then re-enters monitor.
   652 00:E1E6: 86 CF        RDLINE          STX     BUFLEN          ;Store buffer length
   653 00:E1E8: 64 CE                        STZ     BUFIDX          ;Zero buffer index
   654 00:E1EA: 20 2A E2     RDLOOP          JSR     RDCHAR          ;Get character from terminal, convert LC2UC
   655 00:E1ED: C9 1B                        CMP     #$1B            ;Check for ESC key
   656 00:E1EF: F0 36                        BEQ     RDNULL          ;If yes, exit back to Monitor
   657 00:E1F1: C9 0D        NOTESC          CMP     #$0D            ;Check for C/R
   658 00:E1F3: F0 2B                        BEQ     EXITRD          ;Exit if yes
   659 00:E1F5: C9 08                        CMP     #$08            ;Check for Backspace
   660 00:E1F7: F0 1C                        BEQ     RDBKSP          ;If yes handle backspace
   661 00:E1F9: C9 30        TSTHEX          CMP     #$30            ;Check for '0' or higher
   662 00:E1FB: 90 0A                        BCC     INPERR          ;Branch to error if less than '0'
   663 00:E1FD: C9 47                        CMP     #$47            ;Check for 'G' ('F'+1)
   664 00:E1FF: B0 06                        BCS     INPERR          ;Branch to error if 'G' or higher
   665 00:E201: A6 CE        FULTST          LDX     BUFIDX          ;Get the current buffer index
   666 00:E203: E4 CF                        CPX     BUFLEN          ;Compare to length for space
   667 00:E205: 90 05                        BCC     STRCHR          ;Branch to store in buffer
   668 00:E207: 20 78 E1     INPERR          JSR     BEEP            ;Else, error, send Bell to terminal
   669 00:E20A: 80 DE                        BRA     RDLOOP          ;Branch back to RDLOOP
   670 00:E20C: 95 B0        STRCHR          STA     INBUFF,X        ;Store keystroke in buffer
   671 00:E20E: 20 3C FF                     JSR     B_CHROUT        ;Send keystroke to terminal
   672 00:E211: E6 CE                        INC     BUFIDX          ;Increment buffer index
   673 00:E213: 80 D5                        BRA     RDLOOP          ;Branch back to RDLOOP
   674 00:E215: A5 CE        RDBKSP          LDA     BUFIDX          ;Check if buffer is empty
   675 00:E217: F0 EE                        BEQ     INPERR          ;Branch if yes
   676 00:E219: C6 CE                        DEC     BUFIDX          ;Else, decrement buffer index
   677 00:E21B: 20 7D E1                     JSR     BSOUT           ;Send Backspace to terminal
   678 00:E21E: 80 CA                        BRA     RDLOOP          ;Loop back and continue
   679 00:E220: A6 CE        EXITRD          LDX     BUFIDX          ;Get keystroke count (Z flag)
   680 00:E222: D0 0F                        BNE     AOK             ;If data entered, normal exit
   681 00:E224: FF D5 0C                     BBS7    CMDFLAG,AOK     ;Branch if bit7 of cpmmand flag active
   682 00:E227: 6C 0E 03     RDNULL          JMP     (WRMMNVEC0)     ;Quit to Monitor warm start
   683                        ;
   684                        ;RDCHAR subroutine: Waits for a keystroke to be entered.
   685                        ; if keystroke is a lower-case alphabetical, convert it to upper-case
   686 00:E22A: 20 39 FF     RDCHAR          JSR     B_CHRIN         ;Request keystroke input from terminal
   687 00:E22D: C9 61                        CMP     #$61            ;Check for lower case value range
  Mon Feb 11 2019 10:21                                                                                                    Page 12


   688 00:E22F: 90 02                        BCC     AOK             ;Branch if < $61, control code/upper-case/numeric
   689 00:E231: E9 20                        SBC     #$20            ;Subtract $20 to convert to upper case
   690 00:E233: 60           AOK             RTS                     ;Character received, return to caller
   691                        ;
   692                        ;Continue routine: called by commands to confirm execution, when No is confirmed, return address
   693                        ;is removed from stack and the exit goes back to the Monitor input loop.
   694                        ;Short version prompts for (Y/N) only.
   695 00:E234: A9 00        CONTINUE        LDA     #$00            ;Get msg "cont? (Y/N)" to terminal
   696 00:E236: 80 02                        BRA     SH_CONT         ;Branch down
   697 00:E238: A9 01        CONTINUE2       LDA     #$01            ;Get short msg "(Y/N)" only
   698 00:E23A: 20 54 E8     SH_CONT         JSR     PROMPT          ;Send to terminal
   699 00:E23D: 20 2A E2     TRY_AGN         JSR     RDCHAR          ;Get keystroke from terminal
   700 00:E240: C9 59                        CMP     #$59            ;"Y" key?
   701 00:E242: F0 0D                        BEQ     DOCONT          ;if yes, continue/exit
   702 00:E244: C9 4E                        CMP     #$4E            ;if "N", quit/exit
   703 00:E246: F0 05                        BEQ     DONTCNT         ;Return if not ESC
   704 00:E248: 20 78 E1                     JSR     BEEP            ;Send Beep to console
   705 00:E24B: 80 F0                        BRA     TRY_AGN         ;Loop back, try again
   706 00:E24D: 68           DONTCNT         PLA                     ;Else remove return address
   707 00:E24E: 68                           PLA                     ;and discard it
   708 00:E24F: 64 D5                        STZ     CMDFLAG         ;Clear all bits in command flag
   709 00:E251: 60           DOCONT          RTS                     ;Return
   710                        ;
   711                        ;******************************
   712                        ;* Monitor command processors *
   713                        ;******************************
   714                        ;
   715                        ;[,] Delay Setup Routine: This routine gets hex input via the console
   716                        ;  - first is a hex byte ($00-$FF) for the 10-millisecond count
   717                        ;  - second is a hex word ($0000-$FFFF) for the delay multiplier
   718                        ;  - these are stored in variables SETMS, DELLO/DELHI
   719 00:E252: A9 17        SET_DELAY       LDA     #$17            ;Get millisecond delay message
   720 00:E254: 20 1D E1                     JSR     HEX2            ;Use short cut version for print and input
   721 00:E257: 85 F6                        STA     SETMS           ;Else store millisecond count in variable
   722 00:E259: A9 18        GETMULT         LDA     #$18            ;Get Multiplier message
   723 00:E25B: 20 10 E1                     JSR     HEX4            ;Use short cut version for print and input
   724 00:E25E: 85 F7                        STA     DELLO           ;Store Low byte
   725 00:E260: 84 F8                        STY     DELHI           ;Store High byte
   726 00:E262: 60                           RTS                     ;Return to caller
   727                        ;
   728                        ;[\] Execute XL Delay: Get an 8-bit value for extra long delay, execute is entered.
   729 00:E263: A9 19        SET_XLDLY       LDA     #$19            ;Get XL Loop message
   730 00:E265: 20 1D E1                     JSR     HEX2            ;Use short cut version for print and input
   731 00:E268: 85 F9                        STA     XDL             ;Save delay value
   732 00:E26A: A9 0D                        LDA     #$0D            ;Get ASCII C/R
   733 00:E26C: 20 3C FF                     JSR     B_CHROUT        ;Send C/R (show delay started, no L/F)
   734 00:E26F: 4C 48 FF                     JMP     B_EXE_XLDLY     ;Execute Extra Long delay loop
   735                        ;
   736                        ;[(] INIMACRO command: Initialize keystroke input buffer
   737                        ;initializes buffer head/tail pointers and resets buffer count to zero
   738                        ;input buffer appears empty so command macro starts at the head of the buffer
   739 00:E272: 64 DD        INIMACRO        STZ     LPCNTL          ;Zero Loop count low byte
   740 00:E274: 64 DE                        STZ     LPCNTH          ;Zero Loop count high byte
   741                        ;
   742 00:E276: A9 26        LP_CNT_FL       LDA     #$26            ;Get Loop Count msg
   743 00:E278: 20 54 E8                     JSR     PROMPT          ;send to console
   744 00:E27B: A9 01                        LDA     #$01            ;Get short msg "(Y/N)" only
   745 00:E27D: 20 54 E8                     JSR     PROMPT          ;Send to terminal
   746 00:E280: 20 2A E2                     JSR     RDCHAR          ;Get keystroke from terminal
   747 00:E283: C9 59                        CMP     #$59            ;"Y" key?
   748 00:E285: F0 09                        BEQ     DOLOOPS         ;if yes, set loop flag
   749 00:E287: C9 4E                        CMP     #$4E            ;"N" key?
   750 00:E289: F0 07                        BEQ     NOLOOPS         ;if yes, don't set loop flag
  Mon Feb 11 2019 10:21                                                                                                    Page 13


   751 00:E28B: 20 78 E1                     JSR     BEEP            ;Neither (Y/N) selected, sound bell
   752 00:E28E: 80 E6                        BRA     LP_CNT_FL       ;Branch back, try again
   753                        ;
   754 00:E290: E7 D5        DOLOOPS         SMB6    CMDFLAG         ;Set Bit6 bit of command flag
   755 00:E292: 64 E7        NOLOOPS         STZ     ICNT            ;Zero Input buffer count
   756 00:E294: 64 E9                        STZ     ITAIL           ;Zero Input buffer tail pointer
   757 00:E296: 64 E8        MACINI          STZ     IHEAD           ;Zero Input buffer head pointer
   758 00:E298: 60           DONEFILL        RTS                     ;Return to caller
   759                        ;
   760                        ;[)] RUNMACRO command: Run Monitor command macro. This will indicate that there are 128 keystrokes
   761                        ; in the keystroke input buffer. The Monitor will process these as if they were received from the
   762                        ; terminal (typed-in by the user). Because the last keystroke stored in the keystroke buffer was
   763                        ; ")", this will loop continuously. Use [SEND BREAK] to exit Macro
   764 00:E299: A9 7F        RUNMACRO        LDA     #$7F            ;Get keystroke buffer max length-1
   765 00:E29B: 85 E9                        STA     ITAIL           ;Push tail pointer to end
   766 00:E29D: 1A                           INC     A               ;Increment to $80 for buffer count (full)
   767 00:E29E: 85 E7                        STA     ICNT            ;Make count show as full ($80)
   768 00:E2A0: 6F D5 15                     BBR6    CMDFLAG,NOLP_CNT ;If Loop flag clear, branch around it
   769 00:E2A3: E6 DD                        INC     LPCNTL          ;Increment loops low byte
   770 00:E2A5: D0 02                        BNE     SKP_LPC         ;If not zero, skip high byte
   771 00:E2A7: E6 DE                        INC     LPCNTH          ;Increment loops high byte
   772 00:E2A9: A9 27        SKP_LPC         LDA     #$27            ;Get Loops msg
   773 00:E2AB: 20 54 E8                     JSR     PROMPT          ;Send to console
   774 00:E2AE: A5 DD                        LDA     LPCNTL          ;Get Loop count low
   775 00:E2B0: A4 DE                        LDY     LPCNTH          ;Get Loop count high
   776 00:E2B2: 20 D8 E0                     JSR     HEX2ASC         ;Print Loop count
   777 00:E2B5: 20 A3 E1                     JSR     CROUT           ;Send C/R to console
   778 00:E2B8: 80 DC        NOLP_CNT        BRA     MACINI          ;Zero Head pointer and exit
   779                        ;
   780                        ;[B] Benchmark Timer: Start benchmark timer.
   781                        ; This routine displays a message to the console. A (y/n) prompt
   782                        ; allows exit if required. Else it calls the BIOS routine at $FF30. This routine will
   783                        ; clear the counters in page zero and enable the benchmark count routine.
   784                        ; NOTE: The Benchmark counter is handled in BIOS and provides a 16-bit count of seconds
   785                        ; along with a jiffy count with 10ms accuracy.
   786                        ;
   787                        ; The companion Q command quits the Benchmark count and displays the elapsed time as
   788                        ; xxxxx.xx seconds.
   789 00:E2BA: A9 2F        BENCH           LDA     #$2F            ;Get message for Bench startup
   790 00:E2BC: 20 54 E8                     JSR     PROMPT          ;Send message to console
   791 00:E2BF: 20 38 E2                     JSR     CONTINUE2       ;Prompt user (y/n)
   792 00:E2C2: 4C 30 FF                     JMP     B_CNT_STRT      ;Call BIOS routine to zero and start count, return
   793                        ;
   794                        ;[Q] Quit Benchmark timer: Quit Benchmark timer.
   795                        ; Quits Benchmark timer by calling the BIOS routine. Once the Benchmark counter is stopped,
   796                        ; It uses the HEX2ASC routine to print the 16-bit seconds count, followed by a period and
   797                        ; then the HEX8ASC routine prints the hundreds count followed by the Seconds message.
   798 00:E2C5: 20 33 FF     QUITB           JSR     B_CNT_STOP      ;Stop Benchmark counter
   799 00:E2C8: A5 FB                        LDA     SECL_CNT        ;Get seconds low count
   800 00:E2CA: A4 FC                        LDY     SECH_CNT        ;Get seconds high count
   801 00:E2CC: 20 D8 E0                     JSR     HEX2ASC         ;Print ASCII number
   802 00:E2CF: 20 C3 E1                     JSR     PERIOD          ;Send "." to console
   803 00:E2D2: A5 FA                        LDA     10MS_CNT        ;Get hundreds of seconds
   804 00:E2D4: 20 BE E0                     JSR     HEX8ASC         ;Print hundreds of seconds
   805 00:E2D7: A9 30                        LDA     #$30            ;Get message for " Seconds"
   806 00:E2D9: 4C 54 E8                     JMP     PROMPT          ;Send to console, return
   807                        ;
   808                        ;[C] Compare routine: one memory range to another and display any addresses which do not match
   809                        ;[M] Move routine: uses this section for parameter input, then branches to MOVER below
   810                        ;[F] Fill routine: uses this section for parameter input but requires a fill byte value
   811                        ;[CTRL-P] Program EEPROM: uses this section for parameter input and to write the EEPROM
   812                        ;Uses source, target and length input parameters. errors in compare are shown in target space
   813 00:E2DC: A9 05        FM_INPUT        LDA     #$05            ;Send "val: " to terminal
  Mon Feb 11 2019 10:21                                                                                                    Page 14


   814 00:E2DE: 20 1D E1                     JSR     HEX2            ;Use short cut version for print and input
   815 00:E2E1: AA                           TAX                     ;Xfer fill byte to X reg
   816 00:E2E2: 20 34 E2                     JSR     CONTINUE        ;Handle continue prompt
   817                        ;
   818                        ;Memory fill routine: parameter gathered below with Move/Fill,
   819                        ; then a jump to here Xreg contains fill byte value
   820 00:E2E5: A5 CC        FILL_LP         LDA     LENL            ;Get length low byte
   821 00:E2E7: 05 CD                        ORA     LENH            ;OR in length high byte
   822 00:E2E9: F0 AD                        BEQ     DONEFILL        ;Exit if zero
   823 00:E2EB: 8A                           TXA                     ;Get fill byte
   824 00:E2EC: 92 CA                        STA     (TGTL)          ;Store in target location
   825 00:E2EE: 20 59 E1                     JSR     UPD_TL          ;Update Target/Length pointers
   826 00:E2F1: 80 F2                        BRA     FILL_LP         ;Loop back until done
   827                        ;
   828                        ;Compare/Move/Fill memory operations enter here, branches as required
   829 00:E2F3: 85 D3        CPMVFL          STA     TEMP2           ;Save command character
   830 00:E2F5: 20 3C FF                     JSR     B_CHROUT        ;Print command character (C/M/F)
   831 00:E2F8: C9 46                        CMP     #$46            ;Check for F - fill memory
   832 00:E2FA: D0 0B                        BNE     PRGE_E          ;If not continue normal parameter input
   833 00:E2FC: A9 03                        LDA     #$03            ;Get msg " addr:"
   834 00:E2FE: 80 12                        BRA     F_INPUT         ;Branch to handle parameter input
   835                        ;
   836                        ;EEPROM write operation enters here
   837 00:E300: A9 21        PROGEE          LDA     #$21            ;Get PRG_EE msg
   838 00:E302: 20 54 E8                     JSR     PROMPT          ;send to terminal
   839 00:E305: 64 D3                        STZ     TEMP2           ;Clear (Compare/Fill/Move) / error flag
   840                        ;
   841 00:E307: A9 06        PRGE_E          LDA     #$06            ;Send " src:" to terminal
   842 00:E309: 20 10 E1                     JSR     HEX4            ;Use short cut version for print and input
   843 00:E30C: 85 C8                        STA     SRCL            ;Else, store source address in variable SRCL,SRCH
   844 00:E30E: 84 C9                        STY     SRCH            ;Store high address
   845 00:E310: A9 07                        LDA     #$07            ;Send " tgt:" to terminal
   846 00:E312: 20 10 E1     F_INPUT         JSR     HEX4            ;Use short cut version for print and input
   847 00:E315: 85 CA                        STA     TGTL            ;Else, store target address in variable TGTL,TGTH
   848 00:E317: 84 CB                        STY     TGTH            ;Store high address
   849 00:E319: A9 04                        LDA     #$04            ;Send " len:" to terminal
   850 00:E31B: 20 10 E1                     JSR     HEX4            ;Use short cut version for print and input
   851 00:E31E: 85 CC                        STA     LENL            ;ELSE, store length address in variable LENL,LENH
   852 00:E320: 84 CD                        STY     LENH            ;Store high address
   853                        ;
   854                        ; All input parameters for Source, Target and Length entered
   855 00:E322: A5 D3                        LDA     TEMP2           ;Get Command character
   856 00:E324: C9 46                        CMP     #$46            ;Check for fill memory
   857 00:E326: F0 B4                        BEQ     FM_INPUT        ;Handle the remaining input
   858 00:E328: C9 43                        CMP     #$43            ;Test for Compare
   859 00:E32A: F0 31                        BEQ     COMPLP          ;Branch if yes
   860 00:E32C: C9 4D                        CMP     #$4D            ;Check for Move
   861 00:E32E: F0 56                        BEQ     MOVER           ;Branch if yes
   862                        ;
   863 00:E330: A9 22        PROG_EE         LDA     #$22            ;Get warning msg
   864 00:E332: 20 54 E8                     JSR     PROMPT          ;Send to console
   865 00:E335: 20 38 E2                     JSR     CONTINUE2       ;Prompt for y/n
   866                        ;
   867                        ;Programming of the EEPROM is now confirmed by user. This routine will copy the core move and test
   868                        ; routine from ROM to RAM, then call COMPLP to write and compare. As I/O can generate interrupts
   869                        ; which point to ROM routines, all interrupts must be disabled during the program sequence.
   870                        ;
   871                        ;Send message to console for writing EEPROM
   872 00:E338: A9 23                        LDA     #$23            ;Get write message
   873 00:E33A: 20 54 E8                     JSR     PROMPT          ;Send to console
   874 00:E33D: A5 EA        OC_LOOP         LDA     OCNT            ;Check output buffer count
   875 00:E33F: D0 FC                        BNE     OC_LOOP         ;Loop back until buffer sent
   876                        ;
  Mon Feb 11 2019 10:21                                                                                                    Page 15


   877                        ;Xfer byte write code to RAM for execution
   878 00:E341: 20 D5 E3                     JSR     XFER_BYTE_WRT   ;Xfer byte write code to Page Zero
   879                        ;
   880                        ;Wait for 1/2 second for RAM/ROM access to settle
   881 00:E344: A9 32                        LDA     #$32            ;Set milliseconds to 50(*10 ms)
   882 00:E346: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
   883 00:E349: 20 42 FF                     JSR     B_EXE_MSDLY     ;Call delay for 1/2 second
   884                        ;
   885 00:E34C: F7 D3        PROG_EEP        SMB7    TEMP2           ;Set EEPROM write active mask
   886 00:E34E: 20 5D E3                     JSR     COMPLP          ;Call routine to write/compare
   887 00:E351: 6F D3 04                     BBR6    TEMP2,PRG_GOOD  ;Skip down if no error
   888 00:E354: A9 25                        LDA     #$25            ;Get Prog failed message
   889 00:E356: 80 02                        BRA     BRA_PRMPT       ;Branch to Prompt routine
   890                        ;
   891 00:E358: A9 24        PRG_GOOD        LDA     #$24            ;Get completed message
   892 00:E35A: 4C 54 E8     BRA_PRMPT       JMP     PROMPT          ;Send to console and exit
   893                        ;
   894 00:E35D: A5 CC        COMPLP          LDA     LENL            ;Get low byte of length
   895 00:E35F: 05 CD                        ORA     LENH            ;OR in High byte of length
   896 00:E361: F0 71                        BEQ     QUITMV          ;If zero, nothing to compare/write
   897 00:E363: 7F D3 03                     BBR7    TEMP2,SKP_BURN  ;Skip burn if bit 7 clear
   898 00:E366: 20 90 00                     JSR     BURN_BYTE       ;Else Burn a byte to EEPROM
   899 00:E369: B2 C8        SKP_BURN        LDA     (SRCL)          ;Else load source
   900 00:E36B: D2 CA                        CMP     (TGTL)          ;Compare to source
   901 00:E36D: F0 12                        BEQ     CMP_OK          ;If compare is good, continue
   902                        ;
   903 00:E36F: E7 D3                        SMB6    TEMP2           ;Set bit 6 of TEMP2 flag (compare error)
   904 00:E371: 20 93 E1                     JSR     SPC2            ;Send 2 spaces
   905 00:E374: 20 9B E1                     JSR     DOLLAR          ;Print $ sign
   906 00:E377: A5 CB                        LDA     TGTH            ;Get high byte of address
   907 00:E379: A4 CA                        LDY     TGTL            ;Get Low byte of address
   908 00:E37B: 20 DE E1                     JSR     PRWORD          ;Print word
   909 00:E37E: 20 96 E1                     JSR     SPC             ;Add 1 space for formatting
   910                        ;
   911 00:E381: 20 53 E1     CMP_OK          JSR     UPD_STL         ;Update pointers
   912 00:E384: 80 D7                        BRA     COMPLP          ;Loop back until done
   913                        ;
   914                        ;Parameters for move memory entered and validated, now make decision on which direction
   915                        ; to do the actual move, if overlapping, move from end to start, else from start to end.
   916 00:E386: 20 34 E2     MOVER           JSR     CONTINUE        ;Prompt to continue move
   917 00:E389: 38                           SEC                     ;Set carry flag for subtract
   918 00:E38A: A5 CA                        LDA     TGTL            ;Get target lo byte
   919 00:E38C: E5 C8                        SBC     SRCL            ;Subtract source lo byte
   920 00:E38E: AA                           TAX                     ;Move to X reg temporarily
   921 00:E38F: A5 CB                        LDA     TGTH            ;Get target hi byte
   922 00:E391: E5 C9                        SBC     SRCH            ;Subtract source hi byte
   923 00:E393: A8                           TAY                     ;Move to Y reg temporarily
   924 00:E394: 8A                           TXA                     ;Xfer lo byte difference to A reg
   925 00:E395: C5 CC                        CMP     LENL            ;Compare to lo byte length
   926 00:E397: 98                           TYA                     ;Xfer hi byte difference to A reg
   927 00:E398: E5 CD                        SBC     LENH            ;Subtract length lo byte
   928 00:E39A: 90 0F                        BCC     RIGHT           ;If carry is clear, overwrite condition exists
   929                        ;Move memory block first byte to last byte, no overlap condition
   930 00:E39C: A5 CC        MVNO_LP         LDA     LENL            ;Get length low byte
   931 00:E39E: 05 CD                        ORA     LENH            ;OR in length high byte
   932 00:E3A0: F0 32                        BEQ     QUITMV          ;Exit if zero bytes to move
   933 00:E3A2: B2 C8                        LDA     (SRCL)          ;Load source data
   934 00:E3A4: 92 CA                        STA     (TGTL)          ;Store as target data
   935 00:E3A6: 20 53 E1                     JSR     UPD_STL         ;Update Source/Target/Length variables
   936 00:E3A9: 80 F1                        BRA     MVNO_LP         ;Branch back until length is zero
   937                        ;
   938                        ;Move memory block last byte to first byte avoids overwrite in source/target overlap
   939 00:E3AB: A6 CD        RIGHT           LDX     LENH            ;Get the length hi byte count
  Mon Feb 11 2019 10:21                                                                                                    Page 16


   940 00:E3AD: 18                           CLC                     ;Clear carry flag for add
   941 00:E3AE: 8A                           TXA                     ;Xfer High page to A reg
   942 00:E3AF: 65 C9                        ADC     SRCH            ;Add in source hi byte
   943 00:E3B1: 85 C9                        STA     SRCH            ;Store in source hi byte
   944 00:E3B3: 18                           CLC                     ;Clear carry for add
   945 00:E3B4: 8A                           TXA                     ;Xfer High page to A reg 
   946 00:E3B5: 65 CB                        ADC     TGTH            ;Add to target hi byte
   947 00:E3B7: 85 CB                        STA     TGTH            ;Store to target hi byte
   948 00:E3B9: E8                           INX                     ;Increment high page value for use below in loop
   949 00:E3BA: A4 CC                        LDY     LENL            ;Get length lo byte
   950 00:E3BC: F0 0E                        BEQ     MVPG            ;If zero no partial page to move
   951 00:E3BE: 88                           DEY                     ;Else, decrement page byte index
   952 00:E3BF: F0 07                        BEQ     MVPAG           ;If zero, no pages to move
   953 00:E3C1: B1 C8        MVPRT           LDA     (SRCL),Y        ;Load source data
   954 00:E3C3: 91 CA                        STA     (TGTL),Y        ;Store to target data
   955 00:E3C5: 88                           DEY                     ;Decrement index
   956 00:E3C6: D0 F9                        BNE      MVPRT          ;Branch back until partial page moved
   957 00:E3C8: B1 C8        MVPAG           LDA     (SRCL),Y        ;Load source data
   958 00:E3CA: 91 CA                        STA     (TGTL),Y        ;Store to target data
   959 00:E3CC: 88           MVPG            DEY                     ;Decrement page count
   960 00:E3CD: C6 C9                        DEC     SRCH            ;Decrement source hi page
   961 00:E3CF: C6 CB                        DEC     TGTH            ;Decrement target hi page
   962 00:E3D1: CA                           DEX                     ;Decrement page count
   963 00:E3D2: D0 ED                        BNE     MVPRT           ;Loop back until all pages moved
   964 00:E3D4: 60           QUITMV          RTS                     ;Return to caller
   965                        ;
   966                        ;Xfer byte write code to RAM for execution
   967 00:E3D5: A2 15        XFER_BYTE_WRT   LDX     #BYTE_WRE-BYTE_WRS+1 ;Get length of byte write code
   968 00:E3D7: BD DF E3     BYTE_XFER       LDA     BYTE_WRS-1,X    ;Get code
   969 00:E3DA: 95 8F                        STA     BURN_BYTE-1,X   ;Write code to RAM
   970 00:E3DC: CA                           DEX                     ;Decrement index
   971 00:E3DD: D0 F8                        BNE     BYTE_XFER       ;Loop back until done
   972 00:E3DF: 60                           RTS                     ;Return to caller
   973                        ;
   974 00:E3E0: 78           BYTE_WRS        SEI                     ;Disable interrupts
   975 00:E3E1: B2 C8                        LDA     (SRCL)          ;Get source byte
   976 00:E3E3: 92 CA                        STA     (TGTL)          ;Write to target byte
   977 00:E3E5: B2 CA                        LDA     (TGTL)          ;Read target byte (EEPROM)
   978 00:E3E7: 29 40                        AND     #%01000000      ;Mask off bit 6 - toggle bit
   979 00:E3E9: 85 D4        BYTE_WLP        STA     TEMP3           ;Store in Temp location
   980 00:E3EB: B2 CA                        LDA     (TGTL)          ;Read target byte again (EEPROM)
   981 00:E3ED: 29 40                        AND     #%01000000      ;Mask off bit 6 - toggle bit
   982 00:E3EF: C5 D4                        CMP     TEMP3           ;Compare to last read (toggles if write mode)
   983 00:E3F1: D0 F6                        BNE     BYTE_WLP        ;Branch back if not done
   984 00:E3F3: 58                           CLI                     ;Re-enable interrupts
   985 00:E3F4: 60           BYTE_WRE        RTS                     ;Return to caller
   986                        ;
   987                        ;[D] HEX/TEXT DUMP command:
   988                        ; Display in HEX followed by TEXT, the contents of 256 consecutive memory addresses
   989 00:E3F5: F7 D5        MDUMP           SMB7    CMDFLAG         ;Set bit7 of command flag
   990 00:E3F7: 20 08 E1                     JSR     SETUP           ;Request HEX address input from terminal
   991 00:E3FA: D0 08                        BNE     LINED           ;Branch if new address entered (Z flag set already)
   992 00:E3FC: A5 C2                        LDA     TEMP1L          ;Else, point to next consecutive memory page
   993 00:E3FE: 85 C0                        STA     INDEXL          ;address saved during last memory dump
   994 00:E400: A5 C3                        LDA     TEMP1H          ;xfer high byte of address
   995 00:E402: 85 C1                        STA     INDEXH          ;save in pointer
   996 00:E404: 20 4F E4     LINED           JSR     DMPGR           ;Send address offsets to terminal
   997 00:E407: 20 B0 E1                     JSR     GLINE           ;Send horizontal line to terminal
   998 00:E40A: 20 A3 E1                     JSR     CROUT           ;Send CR,LF to terminal
   999 00:E40D: A2 10                        LDX     #$10            ;Set line count for 16 rows
  1000 00:E40F: 20 90 E1     DLINE           JSR     SPC4            ;Send 4 Spaces to terminal
  1001 00:E412: 20 D7 E1                     JSR     PRINDEX         ;Print INDEX value
  1002 00:E415: 20 93 E1                     JSR     SPC2            ;Send 2 Spaces to terminal
  Mon Feb 11 2019 10:21                                                                                                    Page 17


  1003 00:E418: A0 00                        LDY     #$00            ;Initialize line byte counter
  1004 00:E41A: 20 6C E5     GETBYT          JSR     SENGBYT         ;Use Search Engine Get Byte (excludes I/O)
  1005 00:E41D: 99 40 03                     STA     SRCHBUFF,Y      ;Save in Search buffer (16 bytes)
  1006 00:E420: 20 C8 E1                     JSR     PRBYTE          ;Display byte as a HEX value
  1007 00:E423: 20 96 E1                     JSR     SPC             ;Send Space to terminal
  1008 00:E426: 20 71 E1                     JSR     INCINDEX        ;Increment Index to next byte location
  1009 00:E429: C8                           INY                     ;Increment index
  1010 00:E42A: C0 10                        CPY     #$10            ;Check for all 16
  1011 00:E42C: D0 EC                        BNE     GETBYT          ;loop back until 16 bytes have been displayed
  1012 00:E42E: 20 96 E1                     JSR     SPC             ;Send a space
  1013 00:E431: A0 00                        LDY     #$00            ;Reset index for SRCHBUFF
  1014 00:E433: B9 40 03     GETBYT2         LDA     SRCHBUFF,Y      ;Get buffered line (16 bytes)
  1015 00:E436: 20 BB E1                     JSR     PRASC           ;Print ASCII character
  1016 00:E439: C8                           INY                     ;increment index to next byte
  1017 00:E43A: C0 10                        CPY     #$10            ;Check for 16 bytes
  1018 00:E43C: D0 F5                        BNE     GETBYT2         ;loop back until 16 bytes have been displayed
  1019 00:E43E: 20 A3 E1                     JSR     CROUT           ;else, send CR,LF to terminal
  1020 00:E441: A5 C0                        LDA     INDEXL          ;Get current index low
  1021 00:E443: 85 C2                        STA     TEMP1L          ;Save to temp1 low
  1022 00:E445: A5 C1                        LDA     INDEXH          ;Get current index high
  1023 00:E447: 85 C3                        STA     TEMP1H          ;Save to temp1 high
  1024 00:E449: CA                           DEX                     ;Decrement line count
  1025 00:E44A: D0 C3                        BNE     DLINE           ;Branch back until all 16 done
  1026 00:E44C: 20 B0 E1                     JSR     GLINE           ;Send horizontal line to terminal
  1027                        ;DMPGR subroutine: Send address offsets to terminal
  1028 00:E44F: A9 02        DMPGR           LDA     #$02            ;Get msg for "addr:" to terminal
  1029 00:E451: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1030 00:E454: 20 93 E1                     JSR     SPC2            ;Add two additional spaces
  1031 00:E457: A2 00                        LDX     #$00            ;Zero index count
  1032 00:E459: 8A           MDLOOP          TXA                     ;Send "00" thru "0F", separated by 1 Space, to terminal
  1033 00:E45A: 20 C8 E1                     JSR     PRBYTE          ;Print byte value
  1034 00:E45D: 20 96 E1                     JSR     SPC             ;Add a space
  1035 00:E460: E8                           INX                     ;Increment the count
  1036 00:E461: E0 10                        CPX     #$10            ;Check for 16
  1037 00:E463: D0 F4                        BNE     MDLOOP          ;Loop back until done
  1038                        ;Print the ASCII text header "0123456789ABCDEF"
  1039 00:E465: 20 96 E1                     JSR     SPC             ;Send a space
  1040 00:E468: A2 00                        LDX     #$00            ;Zero X reg for "0"
  1041 00:E46A: 8A           MTLOOP          TXA                     ;Xfer to A reg
  1042 00:E46B: 20 A8 E0                     JSR     BIN2ASC         ;Convert Byte to two ASCII digits
  1043 00:E46E: 98                           TYA                     ;Xfer the low nibble character to A reg
  1044 00:E46F: 20 3C FF                     JSR     B_CHROUT        ;Send least significant HEX to terminal
  1045 00:E472: E8                           INX                     ;Increment to next HEX character
  1046 00:E473: E0 10                        CPX     #$10            ;Check for 16
  1047 00:E475: D0 F3                        BNE     MTLOOP          ;branch back till done
  1048 00:E477: 4C A3 E1                     JMP     CROUT           ;Do a CR/LF and return
  1049                        ;
  1050                        ;[E] Examine/Edit command: Display in HEX then change the contents of a specified memory address
  1051 00:E47A: 20 08 E1     CHANGE          JSR     SETUP           ;Request HEX address input from terminal
  1052 00:E47D: A5 C1        CHNG_LP         LDA     INDEXH          ;Test high byte address for RAM (less than $80)
  1053 00:E47F: 30 1E                        BMI     NO_RAM          ;Address not in RAM
  1054 00:E481: 20 93 E1                     JSR     SPC2            ;Send 2 spaces
  1055 00:E484: B2 C0                        LDA     (INDEXL)        ;Read specified address
  1056 00:E486: 20 C8 E1                     JSR     PRBYTE          ;Display HEX value read
  1057 00:E489: 20 88 E1                     JSR     BSOUT3T         ;Send 3 Backspaces
  1058 00:E48C: 20 20 E1                     JSR     HEXIN2          ;Get input, result in A reg
  1059 00:E48F: 92 C0                        STA     (INDEXL)        ;Save entered value at Index pointer
  1060 00:E491: D2 C0                        CMP     (INDEXL)        ;Compare to ensure a match
  1061 00:E493: F0 05                        BEQ     CHOK            ;Branch if compare is good
  1062 00:E495: A9 3F                        LDA     #$3F            ;Get "?" for bad compare
  1063 00:E497: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1064 00:E49A: 20 71 E1     CHOK            JSR     INCINDEX        ;Increment Index
  1065 00:E49D: 80 DE                        BRA     CHNG_LP         ;Loop to continue command
  Mon Feb 11 2019 10:21                                                                                                    Page 18


  1066 00:E49F: A9 33        NO_RAM          LDA     #$33            ;Get error message
  1067 00:E4A1: 20 54 E8                     JSR     PROMPT          ;Send to console
  1068 00:E4A4: 80 D4                        BRA     CHANGE          ;Branch back and try again
  1069                        ;
  1070                        ;[G] GO command: Begin executing program code at a specified address. Prompts the user for a start
  1071                        ; address, places it in COMLO/COMHI. If no address entered, uses default address at COMLO/COMHI
  1072                        ; Loads the A,X,Y,P registers from presets and does a JSR to the routine. Upon return, registers
  1073                        ; are saved back to presets for display later. Also saves the stack pointer and status register
  1074                        ; upon return. Stack pointer is not changed due to constant IRQ service routines
  1075 00:E4A6: F7 D5        GO              SMB7    CMDFLAG         ;Set bit7 of command flag
  1076 00:E4A8: 20 08 E1                     JSR     SETUP           ;Get HEX address (A/Y regs hold 16-bit value)
  1077 00:E4AB: F0 04                        BEQ     EXEC_GO         ;If not, setup REGs and execute (Z flag set)
  1078 00:E4AD: 85 BE                        STA     COMLO           ;Save entered address to pointer low byte
  1079 00:E4AF: 84 BF                        STY     COMHI           ;Save entered address to pointer hi byte
  1080                        ;Preload all 65C02 MPU registers from Monitor's preset/result variables
  1081 00:E4B1: A5 E2        EXEC_GO         LDA     PREG            ;Load processor status register preset
  1082 00:E4B3: 48                           PHA                     ;Push it to the stack
  1083 00:E4B4: A5 E6                        LDA     AREG            ;Load A-Reg preset
  1084 00:E4B6: A6 E5                        LDX     XREG            ;Load X-Reg preset
  1085 00:E4B8: A4 E4                        LDY     YREG            ;Load Y-Reg preset
  1086 00:E4BA: 28                           PLP                     ;Pull the processor status register
  1087                        ;Call user program code as a subroutine
  1088 00:E4BB: 20 CD E4                     JSR     DOCOM           ;Execute code at specified address
  1089                        ;Store all 65C02 MPU registers to Monitor's preset/result variables: store results
  1090 00:E4BE: 08                           PHP                     ;Save the processor status register to the stack
  1091 00:E4BF: 85 E6                        STA     AREG            ;Store A-Reg result
  1092 00:E4C1: 86 E5                        STX     XREG            ;Store X-Reg result
  1093 00:E4C3: 84 E4                        STY     YREG            ;Store Y-Reg result
  1094 00:E4C5: 68                           PLA                     ;Get the processor status register
  1095 00:E4C6: 85 E2                        STA     PREG            ;Store the result
  1096 00:E4C8: BA                           TSX                     ;Xfer stack pointer to X-reg
  1097 00:E4C9: 86 E3                        STX     SREG            ;Store the result
  1098 00:E4CB: D8                           CLD                     ;Clear BCD mode in case of sloppy user code ;-)
  1099 00:E4CC: 60           TXT_EXT         RTS                     ;Return to caller
  1100 00:E4CD: 6C BE 00     DOCOM           JMP     (COMLO)         ;Execute the command
  1101                        ;
  1102                        ;[T] LOCATE TEXT STRING command: search memory for an entered text string
  1103                        ;Memory range scanned is $0800 through $FFFF (specified in SENGINE subroutine)
  1104                        ;SRCHTXT subroutine: request 1 - 16 character text string from terminal, followed by Return
  1105                        ;[ESCAPE] aborts, [BACKSPACE] erases last keystroke. String will be stored in SRCHBUFF
  1106 00:E4D0: A9 08        SRCHTXT         LDA     #$08            ;Get msg " find text:"
  1107 00:E4D2: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1108 00:E4D5: A2 00                        LDX     #$00            ;Initialize index/byte counter
  1109 00:E4D7: 20 39 FF     STLOOP          JSR     B_CHRIN         ;Get input from terminal
  1110 00:E4DA: C9 0D                        CMP     #$0D            ;Check for C/R
  1111 00:E4DC: F0 3B                        BEQ     SRCHRDY         ;Branch to search engine
  1112 00:E4DE: C9 1B                        CMP     #$1B            ;Check for ESC
  1113 00:E4E0: F0 EA                        BEQ     TXT_EXT         ;Exit to borrowed RTS
  1114 00:E4E2: C9 08                        CMP     #$08            ;Check for B/S
  1115 00:E4E4: D0 09                        BNE     STBRA           ;If not, store character into buffer
  1116 00:E4E6: 8A                           TXA                     ;Xfer count to A reg
  1117 00:E4E7: F0 EE                        BEQ     STLOOP          ;Branch to input if zero
  1118 00:E4E9: 20 7D E1                     JSR     BSOUT           ;Else, send B/S to terminal
  1119 00:E4EC: CA                           DEX                     ;Decrement index/byte counter
  1120 00:E4ED: 80 E8                        BRA     STLOOP          ;Branch back and continue
  1121 00:E4EF: 9D 40 03     STBRA           STA     SRCHBUFF,X      ;Store character in buffer location
  1122 00:E4F2: 20 3C FF                     JSR     B_CHROUT        ;Send character to terminal
  1123 00:E4F5: E8                           INX                     ;Increment counter
  1124 00:E4F6: E0 10                        CPX     #$10            ;Check count for 16
  1125 00:E4F8: D0 DD                        BNE     STLOOP          ;Loop back for another character
  1126 00:E4FA: 80 1D                        BRA     SRCHRDY         ;Branch to search engine
  1127                        ;
  1128                        ;[H] LOCATE BYTE STRING command: Search memory for an entered byte string. Memory range
  Mon Feb 11 2019 10:21                                                                                                    Page 19


  1129                        ; scanned is $0400 through $FFFF. SRCHBYT subroutine: request 0 - 16 byte string from
  1130                        ; terminal, byte followed by [RETURN].
  1131                        ; [ESCAPE] aborts. HEX data will be stored in SRCHBUFF
  1132 00:E4FC: F7 D5        SRCHBYT         SMB7    CMDFLAG         ;Set bit7 of command flag
  1133 00:E4FE: A9 09                        LDA     #$09            ;Get msg " find bin:"
  1134 00:E500: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1135 00:E503: A2 00                        LDX     #$00            ;Initialize index
  1136 00:E505: DA           SBLOOP          PHX                     ;Save index on stack
  1137 00:E506: 20 20 E1                     JSR     HEXIN2          ;Request HEX byte
  1138 00:E509: 20 96 E1                     JSR     SPC             ;Send space to terminal
  1139 00:E50C: FA                           PLX                     ;Restore index from stack
  1140 00:E50D: A4 CE                        LDY     BUFIDX          ;Get # of characters entered 
  1141 00:E50F: F0 08                        BEQ     SRCHRDY         ;Branch if no characters
  1142 00:E511: 9D 40 03                     STA     SRCHBUFF,X      ;Else, store in buffer
  1143 00:E514: E8                           INX                     ;Increment index
  1144 00:E515: E0 10                        CPX     #$10            ;Check for 16 (max)
  1145 00:E517: D0 EC                        BNE     SBLOOP          ;Loop back until done/full
  1146 00:E519: 86 D0        SRCHRDY         STX     IDX             ;Save input character count
  1147 00:E51B: E0 00                        CPX     #$00            ;Check buffer count
  1148 00:E51D: F0 AD                        BEQ     TXT_EXT         ;Exit if no bytes in buffer
  1149 00:E51F: A9 0C                        LDA     #$0C            ;Else, get msg "Searching.."
  1150 00:E521: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1151                        ;
  1152                        ;SENGINE subroutine: Scan memory range $0400 through $FFFF for exact match to string contained
  1153                        ; in buffer SRCHBUFF (1 to 16 bytes/characters). Display address of first byte/character of
  1154                        ; each match found until the end of memory is reached.
  1155 00:E524: A9 04        SENGINE         LDA     #$04            ;Initialize address to $0400: skip over $0000 - $03FF
  1156 00:E526: 85 C1                        STA     INDEXH          ;Store high byte
  1157 00:E528: 64 C0                        STZ     INDEXL          ;Zero low byte
  1158 00:E52A: A2 00        SENGBR2         LDX     #$00            ;Initialize buffer index
  1159 00:E52C: 20 6C E5     SENGBR3         JSR     SENGBYT         ;Get the next byte from Index pointer
  1160 00:E52F: DD 40 03                     CMP     SRCHBUFF,X      ;Compare to search buffer
  1161 00:E532: F0 05                        BEQ     SENGBR1         ;Branch for a match
  1162 00:E534: 20 7E E5                     JSR     SINCPTR         ;Increment pointer, test for end of memory
  1163 00:E537: 80 F1                        BRA     SENGBR2         ;Loop back to continue
  1164 00:E539: 20 7E E5     SENGBR1         JSR     SINCPTR         ;Increment pointer, test for end of memory
  1165 00:E53C: E8                           INX                     ;Increment buffer index
  1166 00:E53D: E4 D0                        CPX     IDX             ;Compare buffer index to address index
  1167 00:E53F: D0 EB                        BNE     SENGBR3         ;Loop back until done
  1168 00:E541: 38                           SEC                     ;Subtract buffer index from memory pointer; Set carry
  1169 00:E542: A5 C0                        LDA     INDEXL          ;Get current address for match lo byte
  1170 00:E544: E5 D0                        SBC     IDX             ;Subtract from buffer index
  1171 00:E546: 85 C0                        STA     INDEXL          ;Save it back to lo address pointer
  1172 00:E548: A5 C1                        LDA     INDEXH          ;Get current address for match hi byte
  1173 00:E54A: E9 00                        SBC     #$00            ;Subtract carry flag
  1174 00:E54C: 85 C1                        STA     INDEXH          ;Save it back to hi address pointer
  1175 00:E54E: A9 0B                        LDA     #$0B            ;Get msg "found"
  1176 00:E550: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1177 00:E553: A9 3A                        LDA     #':'            ;Get Ascii colon
  1178 00:E555: 20 3C FF                     JSR     B_CHROUT        ;Send to console
  1179 00:E558: 20 D7 E1                     JSR     PRINDEX         ;Print Index address
  1180 00:E55B: A9 0D                        LDA     #$0D            ;Get msg "(n)ext? "
  1181 00:E55D: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1182 00:E560: 20 2A E2                     JSR     RDCHAR          ;Get input from terminal
  1183 00:E563: C9 4E                        CMP     #$4E            ;Check for "(n)ext"
  1184 00:E565: D0 4A                        BNE     NCAREG          ;Exit if not requesting next
  1185 00:E567: 20 7E E5                     JSR     SINCPTR         ;Increment address pointer, test for end of memory
  1186 00:E56A: 80 BE                        BRA     SENGBR2         ;Branch back and continue till done
  1187                        ;
  1188                        ;Search Engine GetByte routine: This routine gets the byte value from the current Index pointer
  1189                        ; location. It also checks the Index location FIRST. The I/O page is excluded from the actual data
  1190                        ; search to prevent corrupting any I/O devices which are sensitive to any READ operations outside
  1191                        ; the BIOS which supports it. An example is the NXP UART family, of which the SCC2691 is used here.
  Mon Feb 11 2019 10:21                                                                                                    Page 20


  1192                        ; Current I/O Page Range is $FE00 - $FE9F
  1193                        ; NOTE: $FEA0 - $FEFF used for vector/config data - allows searching here
  1194 00:E56C: A5 C1        SENGBYT         LDA     INDEXH          ;Get High byte address for current Index
  1195 00:E56E: C9 FE                        CMP     #$FE            ;Check for Base I/O page
  1196 00:E570: F0 03                        BEQ     CHK_UPR         ;If yes, check for I/O range
  1197 00:E572: B2 C0        SENRTBYT        LDA     (INDEXL)        ;Else Get byte from current pointer
  1198 00:E574: 60                           RTS                     ;Return to caller
  1199 00:E575: A5 C0        CHK_UPR         LDA     INDEXL          ;Get Low byte address for current Index
  1200 00:E577: C9 A0                        CMP     #$A0            ;Check for end of I/O addresses
  1201 00:E579: B0 F7                        BCS     SENRTBYT        ;Return ROM data if range is $FEA0 or higher
  1202 00:E57B: A9 FE                        LDA     #$FE            ;Get $FE as seed byte instead of I/O device read
  1203 00:E57D: 60                           RTS                     ;Return to caller
  1204                        ;
  1205                        ;Increment memory address pointer. If pointer high byte = 00 (end of searchable ROM memory),
  1206                        ; send "not found" to terminal then return to Monitor
  1207 00:E57E: 20 71 E1     SINCPTR         JSR     INCINDEX        ;Increment Index pointer
  1208 00:E581: A5 C1                        LDA     INDEXH          ;Check for wrap to $0000
  1209 00:E583: D0 2C                        BNE     NCAREG          ;If not, return
  1210 00:E585: 68                           PLA                     ;Else, Pull return address from stack
  1211 00:E586: 68                           PLA                     ;and exit with msg
  1212 00:E587: A9 0A                        LDA     #$0A            ;Get msg "not found"
  1213 00:E589: 4C 54 E8                     JMP     PROMPT          ;Send msg to terminal and exit
  1214                        ;
  1215                        ;[P] Processor Status command: Display then change PS preset/result
  1216 00:E58C: A9 0E        PRG             LDA     #$0E            ;Get MSG # for Processor Status register
  1217 00:E58E: 80 0E                        BRA     REG_UPT         ;Finish register update
  1218                        ;
  1219                        ;[S] Stack Pointer command: Display then change SP preset/result
  1220 00:E590: A9 0F        SRG             LDA     #$0F            ;Get MSG # for Stack register
  1221 00:E592: 80 0A                        BRA     REG_UPT         ;Finish Register update
  1222                        ;
  1223                        ;[Y] Y-Register command: Display then change Y-reg preset/result
  1224 00:E594: A9 10        YRG             LDA     #$10            ;Get MSG # for Y Reg
  1225 00:E596: 80 06                        BRA     REG_UPT         ;Finish register update
  1226                        ;
  1227                        ;[X] X-Register command: Display then change X-reg preset/result
  1228 00:E598: A9 11        XRG             LDA     #$11            ;Get MSG # for X Reg
  1229 00:E59A: 80 02                        BRA     REG_UPT         ;Finish register update
  1230                        ;
  1231                        ;[A] A-Register command: Display then change A-reg preset/result
  1232 00:E59C: A9 12        ARG             LDA     #$12            ;Get MSG # for A reg
  1233                        ;
  1234 00:E59E: 48           REG_UPT         PHA                     ;Save MSG # to stack
  1235 00:E59F: AA                           TAX                     ;Xfer to X reg
  1236 00:E5A0: 20 54 E8                     JSR     PROMPT          ;Print Register message
  1237 00:E5A3: B5 D4                        LDA     PREG-$0E,X      ;Read Register (A,X,Y,S,P) preset/result
  1238 00:E5A5: 20 C8 E1                     JSR     PRBYTE          ;Display HEX value of register
  1239 00:E5A8: 20 96 E1                     JSR     SPC             ;Send [SPACE] to terminal
  1240 00:E5AB: 20 20 E1                     JSR     HEXIN2          ;Get up to 2 HEX characters
  1241 00:E5AE: FA                           PLX                     ;Get MSG # from stack
  1242 00:E5AF: 95 D4                        STA     PREG-$0E,X      ;Write register (A,X,Y,S,P) preset/result
  1243 00:E5B1: 60           NCAREG          RTS                     ;Return to caller
  1244                        ;
  1245                        ;[R] REGISTERS command: Display contents of all preset/result memory locations
  1246 00:E5B2: 20 3C FF     PRSTAT          JSR     B_CHROUT        ;Send "R" to terminal
  1247 00:E5B5: A9 13        PRSTAT1         LDA     #$13            ;Get Header msg
  1248 00:E5B7: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1249 00:E5BA: A5 E1                        LDA     PCH             ;Get PC high byte
  1250 00:E5BC: A4 E0                        LDY     PCL             ;Get PC low byte
  1251 00:E5BE: 20 DE E1                     JSR     PRWORD          ;Print 16-bit word
  1252 00:E5C1: 20 96 E1                     JSR     SPC             ;Send 1 space
  1253                        ;
  1254 00:E5C4: A2 04                        LDX     #$04            ;Set for count of 4
  Mon Feb 11 2019 10:21                                                                                                    Page 21


  1255 00:E5C6: B5 E2        REGPLOOP        LDA     PREG,X          ;Start with A reg variable
  1256 00:E5C8: 20 C8 E1                     JSR     PRBYTE          ;Print it
  1257 00:E5CB: 20 96 E1                     JSR     SPC             ;Send 1 space
  1258 00:E5CE: CA                           DEX                     ;Decrement count
  1259 00:E5CF: D0 F5                        BNE     REGPLOOP        ;Loop back till all 4 are sent
  1260                        ;
  1261 00:E5D1: A5 E2                        LDA     PREG            ;Get Status register preset
  1262 00:E5D3: A2 08                        LDX     #$08            ;Get the index count for 8 bits
  1263 00:E5D5: 0A           SREG_LP         ASL     A               ;Shift bit into Carry
  1264 00:E5D6: 48                           PHA                     ;Save current (shifted) SR value
  1265 00:E5D7: A9 30                        LDA     #$30            ;Load an Ascii zero
  1266 00:E5D9: 69 00                        ADC     #$00            ;Add zero (with Carry)
  1267 00:E5DB: 20 3C FF                     JSR     B_CHROUT        ;Print bit value (0 or 1)
  1268 00:E5DE: 68                           PLA                     ;Get current (shifted) SR value
  1269 00:E5DF: CA                           DEX                     ;Decrement bit count
  1270 00:E5E0: D0 F3                        BNE     SREG_LP         ;Loop back until all 8 printed
  1271 00:E5E2: 4C A3 E1                     JMP     CROUT           ;Send CR/LF and return
  1272                        ;
  1273                        ;[I] command: TEXT ENTRY enter ASCII text beginning at a specified address
  1274 00:E5E5: 20 08 E1     TEXT            JSR     SETUP           ;Send "I" command, handle setup
  1275 00:E5E8: 20 A3 E1     EDJMP1          JSR     CROUT           ;Send CR,LF to terminal
  1276 00:E5EB: 85 C4                        STA     TEMP2L          ;Save current edit address
  1277 00:E5ED: 84 C5                        STY     TEMP2H          ;Save high byte
  1278 00:E5EF: 20 39 FF     EDJMP2          JSR     B_CHRIN         ;Request a keystroke from terminal
  1279 00:E5F2: C9 1B                        CMP     #$1B            ;Check for end text entry
  1280 00:E5F4: F0 3C                        BEQ     EDITDUN         ;Branch and close out if yes
  1281 00:E5F6: C9 0D                        CMP     #$0D            ;Else, check for Return key
  1282 00:E5F8: D0 12                        BNE     ENOTRET         ;Branch if not
  1283 00:E5FA: 92 C0                        STA     (INDEXL)        ;Save CR to current Index pointer
  1284 00:E5FC: 20 71 E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1285 00:E5FF: A9 0A                        LDA     #$0A            ;Get a LF character
  1286 00:E601: 92 C0                        STA     (INDEXL)        ;Store it in memory
  1287 00:E603: 20 71 E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1288 00:E606: A5 C0                        LDA     INDEXL          ;Get Start of next line
  1289 00:E608: A4 C1                        LDY     INDEXH          ;and the high byte
  1290 00:E60A: 80 DC                        BRA     EDJMP1          ;Loop back to continue
  1291 00:E60C: C9 08        ENOTRET         CMP     #$08            ;Check for backspace character
  1292 00:E60E: F0 0A                        BEQ     EDBKSPC         ;Branch if yes
  1293 00:E610: 92 C0                        STA     (INDEXL)        ;Else, save to current Index pointer
  1294 00:E612: 20 3C FF                     JSR     B_CHROUT        ;Send keystroke to terminal
  1295 00:E615: 20 71 E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1296 00:E618: 80 D5                        BRA     EDJMP2          ;Loop back to EDJMP2
  1297                        ;Handle Backspace, don't allow past starting address
  1298 00:E61A: A5 C0        EDBKSPC         LDA     INDEXL          ;Get current index low byte
  1299 00:E61C: C5 C4                        CMP     TEMP2L          ;Compare to initial start address
  1300 00:E61E: D0 06                        BNE     EDDOBKS         ;if not equal, perform backspace
  1301 00:E620: A5 C1                        LDA     INDEXH          ;Get current index high byte
  1302 00:E622: C5 C5                        CMP     TEMP2H          ;Compare to initial start address
  1303 00:E624: F0 C9                        BEQ     EDJMP2          ;If same, branch to input loop
  1304 00:E626: 20 7D E1     EDDOBKS         JSR     BSOUT           ;Send backspace to terminal
  1305 00:E629: 20 68 E1                     JSR     DECINDEX        ;Decrement edit memory address pointer
  1306 00:E62C: A9 00                        LDA     #$00            ;Get a null character
  1307 00:E62E: 92 C0                        STA     (INDEXL)        ;Store in place of character
  1308 00:E630: 80 BD                        BRA     EDJMP2          ;LOOP back to EDJMP2
  1309 00:E632: 20 A0 E1     EDITDUN         JSR     CR2             ;Send 2 CR,LF to terminal
  1310 00:E635: 4C D7 E1                     JMP     PRINDEX         ;Print INDEX value
  1311                        ;
  1312                        ;[CTRL-A] Start Assembler:
  1313 00:E638: A9 34        ASSEMBLE        LDA     #$34            ;Get sorry message
  1314 00:E63A: 4C 54 E8                     JMP     PROMPT          ;Send to console and return
  1315                        ;
  1316                        ;[CTRL-B] Start Enhanced Basic:
  1317 00:E63D: A9 36        EHBASIC         LDA     #$36            ;Get EhBasic intro Msg
  Mon Feb 11 2019 10:21                                                                                                    Page 22


  1318 00:E63F: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1319                        ;
  1320 00:E642: 20 2A E2     EHB_TRY2        JSR     RDCHAR          ;Get character (LC2UC)
  1321 00:E645: C9 43                        CMP     #"C"            ;Check for Cold start
  1322 00:E647: F0 09                        BEQ     EHB_COLD        ;If yes, go Cold Start
  1323 00:E649: C9 57                        CMP     #"W"            ;Check for Warm start
  1324 00:E64B: F0 08                        BEQ     EHB_WARM        ;If yes. go Warm start
  1325 00:E64D: 20 78 E1                     JSR     BEEP            ;Else, beep for entry error
  1326 00:E650: 80 F0                        BRA     EHB_TRY2        ;Branch back and try again
  1327                        ;
  1328 00:E652: 4C 00 B0     EHB_COLD        JMP     $B000           ;Cold start ROM vector
  1329                        ;
  1330 00:E655: 4C 00 00     EHB_WARM        JMP     $0000           ;Warm start soft vector
  1331                        ;
  1332                        ;[CTRL-D] Disassembler: Table-Driven Disassembler. Supports ALL W65C02 Opcodes and Address modes.
  1333 00:E658: A9 2E        DSSMBLR         LDA     #$2E            ;Intro Message
  1334 00:E65A: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1335 00:E65D: A9 03                        LDA     #$03            ;Msg 03 -" addr:"
  1336 00:E65F: 20 10 E1                     JSR     HEX4            ;Print msg and get address
  1337 00:E662: 20 A3 E1                     JSR     CROUT           ;Send CR,LF to terminal
  1338 00:E665: A2 16        RPT_LST         LDX     #$16            ;Set list count to 22
  1339 00:E667: DA           DIS_LOOP        PHX                     ;Push count to stack
  1340 00:E668: 20 7F E6                     JSR     DIS_LINE        ;Disassemble 1 instruction
  1341 00:E66B: FA                           PLX                     ;Pull count from stack
  1342 00:E66C: CA                           DEX                     ;Decrement count
  1343 00:E66D: D0 F8                        BNE     DIS_LOOP        ;Loop back till list count is zero
  1344 00:E66F: 20 39 FF     LST_LOOP        JSR     B_CHRIN         ;Get input from terminal
  1345 00:E672: C9 0D                        CMP     #$0D            ;Check for Return key
  1346 00:E674: F0 32                        BEQ     EXT_LIST        ;Exit if Return
  1347 00:E676: C9 20                        CMP     #$20            ;Check for Space
  1348 00:E678: D0 EB                        BNE     RPT_LST         ;If not, go back and list another page
  1349 00:E67A: 20 7F E6                     JSR     DIS_LINE        ;Else, Disassemble one line
  1350 00:E67D: 80 F0                        BRA     LST_LOOP        ;Branch back and continue
  1351                        ;
  1352                        ;DISASSEMBLE LINE: disassemble 1 instruction from working address
  1353 00:E67F: 20 D7 E1     DIS_LINE        JSR     PRINDEX         ;Print working address
  1354 00:E682: 20 93 E1                     JSR     SPC2            ;Send 2 spaces to terminal
  1355 00:E685: B2 C0                        LDA     (INDEXL)        ;Read opcode from working memory pointer
  1356 00:E687: 85 D6                        STA     OPXMDM          ;Save opcode
  1357 00:E689: 20 F0 E6                     JSR     PRB_SPC2        ;Print byte, 2 spaces
  1358 00:E68C: 4A                           LSR     A               ;Divide by 2 / shift low order bit into carry flag
  1359 00:E68D: AA                           TAX                     ;Xfer Opcode /2 to X reg
  1360 00:E68E: BD EB F1                     LDA     HDLR_IDX,X      ;Get Pointer to handler table
  1361 00:E691: B0 04                        BCS     USE_RGHT        ;If carry set use low nibble (odd)
  1362 00:E693: 4A                           LSR     A               ;Else shift upper nibble to lower nibble (even)
  1363 00:E694: 4A                           LSR     A
  1364 00:E695: 4A                           LSR     A
  1365 00:E696: 4A                           LSR     A
  1366 00:E697: 29 0F        USE_RGHT        AND     #$0F            ;Mask off high nibble
  1367 00:E699: 0A                           ASL     A               ;Multiply by 2 for index
  1368 00:E69A: AA                           TAX                     ;Use handler pointer to index handler table
  1369 00:E69B: 20 A9 E6                     JSR     DODISL          ;Call disassembler handler
  1370 00:E69E: 20 A3 E1                     JSR     CROUT           ;Send CR,LF to terminal
  1371 00:E6A1: 64 D3                        STZ     TEMP2           ;Clear all flag bits
  1372                        ;
  1373                        ;INCNDX routine: increment working address pointer then read it
  1374 00:E6A3: 20 71 E1     INCNDX          JSR     INCINDEX        ;Increment working address pointer
  1375 00:E6A6: B2 C0                        LDA     (INDEXL)        ;Read from working memory address
  1376 00:E6A8: 60           EXT_LIST        RTS                     ;Done, return to caller/exit
  1377                        ;
  1378 00:E6A9: 7C 6B F2     DODISL          JMP     (HDLR_TAB,X)    ;Execute address mode handler
  1379                        ;
  1380                        ;THREE BYTE routine: display operand bytes then mnemonic for three-byte instruction
  Mon Feb 11 2019 10:21                                                                                                    Page 23


  1381                        ; TWO BYTE routine: display operand byte then mnemonic for two-byte instruction
  1382 00:E6AC: F7 D3        TRI_BYTE        SMB7    TEMP2           ;Set Flag bit for 3-byte instruction
  1383 00:E6AE: 20 ED E6     TWO_BYTE        JSR     GET_NEXT        ;Read, display operand byte
  1384 00:E6B1: 85 D8                        STA     CRCLO           ;Save operand byte in CRCLO
  1385 00:E6B3: 7F D3 0A                     BBR7    TEMP2,2BYTSPC   ;Branch for 2-byte is clear
  1386 00:E6B6: 20 ED E6                     JSR     GET_NEXT        ;Read, display operand high byte
  1387 00:E6B9: 85 D7                        STA     CRCHI           ;Save operand high byte in CRCHI
  1388 00:E6BB: 80 06                        BRA     3BYTSPC         ;Send 2 spaces, send Mnemonic, return
  1389                        ;
  1390                        ;IMPLIED disassembler handler: single byte instructions: implied mode
  1391                        ; (note: ACC_MODE handler calls this)
  1392 00:E6BD: 20 90 E1     IMPLIED         JSR     SPC4            ;Send 4 spaces
  1393 00:E6C0: 20 90 E1     2BYTSPC         JSR     SPC4            ;Send 4 spaces
  1394 00:E6C3: 20 93 E1     3BYTSPC         JSR     SPC2            ;Send 2 spaces
  1395                        ;
  1396                        ;PRT_MNEM subroutine: send 3 character mnemonic to terminal
  1397                        ; Mnemonic indexed by opcode byte. Sends "???" if byte is not a valid opcode
  1398 00:E6C6: A4 D6        PRT_MNEM        LDY     OPXMDM          ;Get current Opcode as index
  1399 00:E6C8: BE 8B F2                     LDX     MNE_PTAB,Y      ;Get opcode pointer from table
  1400 00:E6CB: BD 8B F3                     LDA     DIS_NMEM,X      ;Get left byte
  1401 00:E6CE: 85 DA                        STA     PTRL            ;Store it to pointer
  1402 00:E6D0: BD 8C F3                     LDA     DIS_NMEM+1,X    ;Get right byte
  1403 00:E6D3: 85 DB                        STA     PTRH            ;Store it to pointer
  1404 00:E6D5: A2 03                        LDX     #$03            ;Set count for 3 characters
  1405 00:E6D7: A9 00        NEXT_NME        LDA     #$00            ;Zero A reg
  1406 00:E6D9: A0 05                        LDY     #$05            ;Set count for 5 bits per character
  1407 00:E6DB: 06 DB        LOOP_NME        ASL     PTRH            ;Shift right byte into carry
  1408 00:E6DD: 26 DA                        ROL     PTRL            ;Rotate left byte into A reg
  1409 00:E6DF: 2A                           ROL     A               ;Rotate into A reg
  1410 00:E6E0: 88                           DEY                     ;Decrement bit count
  1411 00:E6E1: D0 F8                        BNE     LOOP_NME        ;Loop back till 5 bits in A reg
  1412 00:E6E3: 69 3F                        ADC     #$3F            ;Add $3F to convert to Ascii
  1413 00:E6E5: 20 3C FF                     JSR     B_CHROUT        ;Send the character to terminal
  1414 00:E6E8: CA                           DEX                     ;Decrement character count
  1415 00:E6E9: D0 EC                        BNE     NEXT_NME        ;Loop back till 3 characters sent
  1416 00:E6EB: 80 06                        BRA     BR_SPC2         ;Send 2 spaces to terminal, return
  1417                        ;
  1418                        ;GET_NEXT subroutine: increment/read working address
  1419                        ; Display byte, send 2 spaces to terminal (displays operand byte(s))
  1420 00:E6ED: 20 A3 E6     GET_NEXT        JSR     INCNDX          ;Increment working index
  1421 00:E6F0: 20 C8 E1     PRB_SPC2        JSR     PRBYTE          ;Display Byte from working index
  1422 00:E6F3: 4C 93 E1     BR_SPC2         JMP     SPC2            ;Send 2 spaces to terminal and return
  1423                        ;
  1424                        ;Disassembler handlers:
  1425                        ;
  1426                        ;LF_BRKT subroutine: send "(" to terminal
  1427 00:E6F6: A9 28        LF_BRKT         LDA     #$28            ;Get "("
  1428 00:E6F8: 80 0F                        BRA     BR_COUT         ;Send to terminal and return
  1429                        ;
  1430                        ;ZP_IMMEDIATE: two byte instructions: zero-page immediate mode
  1431 00:E6FA: 20 AE E6     ZP_IMED         JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1432 00:E6FD: A9 23                        LDA     #$23            ;Get "#" character
  1433 00:E6FF: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1434 00:E702: 80 1B                        BRA     PRT1_OP         ;Display operand byte again, return
  1435                        ;
  1436                        ;ACC_MODE: single byte A reg mode instructions: implied mode 
  1437 00:E704: 20 BD E6     ACC_MODE        JSR     IMPLIED         ;Send 10 spaces to terminal then display mnemonic
  1438 00:E707: A9 41                        LDA     #$41            ;Get "A" character
  1439 00:E709: 4C 3C FF     BR_COUT         JMP     B_CHROUT        ;Send it and return
  1440                        ;
  1441                        ;ABSOLUTE: three byte instructions: absolute mode 
  1442 00:E70C: 20 AC E6     ABSOLUTE        JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1443                        ;
  Mon Feb 11 2019 10:21                                                                                                    Page 24


  1444                        ;Print 2 Operands: display operand bytes of a three-byte instruction
  1445 00:E70F: 20 9B E1     PRT2_OP         JSR     DOLLAR          ;Send "$" to terminal
  1446 00:E712: A5 D7                        LDA     CRCHI           ;Load operand high byte
  1447 00:E714: 20 C8 E1                     JSR     PRBYTE          ;Send to terminal
  1448 00:E717: A5 D8        BR_PRBTE        LDA     CRCLO           ;Load operand low byte
  1449 00:E719: 4C C8 E1                     JMP     PRBYTE          ;Send to terminal and return
  1450                        ;
  1451                        ;ZP_ABS: two byte instructions: zero-page absolute
  1452 00:E71C: 20 AE E6     ZP_ABS          JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1453                        ;
  1454                        ;Print 1 Operand byte: display operand byte of a two-byte instruction
  1455 00:E71F: 20 9B E1     PRT1_OP         JSR     DOLLAR          ;Send "$" to terminal
  1456 00:E722: 80 F3                        BRA     BR_PRBTE        ;Branch to complete
  1457                        ;
  1458                        ;INDIRECT: two or three byte instructions: indirect modes
  1459 00:E724: A5 D6        INDIRECT        LDA     OPXMDM          ;Read saved opcode byte
  1460 00:E726: C9 6C                        CMP     #$6C            ;Check for JMP(INDIRECT)
  1461 00:E728: D0 13                        BNE     ZP_IND          ;Branch if not
  1462                        ;
  1463 00:E72A: 20 AC E6                     JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1464 00:E72D: 20 F6 E6                     JSR     LF_BRKT         ;Send "(" to terminal
  1465 00:E730: 20 0F E7                     JSR     PRT2_OP         ;Display operand bytes again
  1466 00:E733: 80 0B                        BRA     RT_BRKT         ;Send ")" to terminal, return
  1467                        ;
  1468                        ;Following group is used multiple times, space savings
  1469 00:E735: 20 AE E6     DSPLY3          JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1470 00:E738: 20 F6 E6                     JSR     LF_BRKT         ;Send "(" to terminal
  1471 00:E73B: 80 E2                        BRA     PRT1_OP         ;Display operand byte again, return
  1472                        ;
  1473                        ;this is for a two byte instruction: zero page indirect mode
  1474 00:E73D: 20 35 E7     ZP_IND          JSR     DSPLY3          ;Do the 3 routines
  1475                        ;
  1476                        ;RT_BRKT subroutine: send ")" to terminal
  1477 00:E740: A9 29        RT_BRKT         LDA     #$29            ;Get ")"
  1478 00:E742: 80 C5                        BRA     BR_COUT         ;Send to terminal and return
  1479                        ;
  1480                        ;ZP_ABS_X: two byte instructions: zero-page absolute indexed by X mode
  1481 00:E744: 20 1C E7     ZP_ABS_X        JSR     ZP_ABS          ;Display operand byte, mnemonic, operand byte
  1482                        ;
  1483                        ;Print Comma,X: send ",X" to terminal
  1484 00:E747: A9 2C        COM_X           LDA     #$2C            ;Get ","
  1485 00:E749: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1486 00:E74C: A9 58                        LDA     #$58            ;Get "X"
  1487 00:E74E: 80 B9                        BRA     BR_COUT         ;Send to terminal, return
  1488                        ;
  1489                        ;ZP_ABS_Y: two byte instructions: zero-page absolute indexed by Y mode
  1490 00:E750: 20 1C E7     ZP_ABS_Y        JSR     ZP_ABS          ;Display operand byte, mnemonic, operand byte
  1491                        ;
  1492                        ;Print Comma,Y: send ",Y" to terminal
  1493 00:E753: A9 2C        COM_Y           LDA     #$2C            ;Get ","
  1494 00:E755: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1495 00:E758: A9 59                        LDA     #$59            ;Get "Y"
  1496 00:E75A: 80 AD                        BRA     BR_COUT         ;Send to terminal, return
  1497                        ;
  1498                        ;ABS_Y: three byte instructions: absolute indexed by Y mode
  1499                        ;ABS_X: three byte instructions: absolute indexed by X mode
  1500 00:E75C: E7 D3        ABS_Y           SMB6    TEMP2
  1501 00:E75E: 20 AC E6     ABS_X           JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1502 00:E761: 20 0F E7                     JSR     PRT2_OP         ;Display operand bytes again
  1503 00:E764: EF D3 EC                     BBS6    TEMP2,COM_Y
  1504 00:E767: 80 DE                        BRA     COM_X           ;Send ",X" to terminal, return
  1505                        ;
  1506                        ;ZP_IND_X: two byte instructions: zero-page indirect pre-indexed by X mode
  Mon Feb 11 2019 10:21                                                                                                    Page 25


  1507 00:E769: 20 35 E7     ZP_IND_X        JSR     DSPLY3          ;Do the 3 routines
  1508 00:E76C: 20 47 E7                     JSR     COM_X           ;Send ",X" to terminal
  1509 00:E76F: 80 CF                        BRA     RT_BRKT         ;Send ")" to terminal, return
  1510                        ;
  1511                        ;ZP_IND_Y: two byte instructions: zero-page indirect post-indexed by Y mode
  1512 00:E771: 20 35 E7     ZP_IND_Y        JSR     DSPLY3          ;Do the 3 routines
  1513 00:E774: 20 40 E7                     JSR     RT_BRKT         ;Send ")" to terminal
  1514 00:E777: 80 DA                        BRA     COM_Y           ;Send ",Y" to terminal, return
  1515                        ;
  1516                        ;IND_ABS_X: three byte instruction: JMP (INDIRECT,X) 16 bit indirect
  1517 00:E779: 20 AC E6     IND_ABS_X       JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1518 00:E77C: 20 F6 E6                     JSR     LF_BRKT         ;Send "(" to terminal
  1519 00:E77F: 20 0F E7                     JSR     PRT2_OP         ;Display operand bytes again
  1520 00:E782: 20 47 E7                     JSR     COM_X           ;Send ",X" to terminal
  1521 00:E785: 80 B9                        BRA     RT_BRKT         ;Send ")" to terminal,done w/INDABSX handler, return
  1522                        ;
  1523                        ;ZP_XMB: two byte instructions: zero page set/clear memory bit
  1524 00:E787: 20 E4 E7     ZP_XMB          JSR     SRMB            ;Display operand/mnemonic, isolate bit selector from opcode
  1525 00:E78A: C9 08                        CMP     #$08            ;Check if 0-7 or 8-F
  1526 00:E78C: 90 02                        BCC     SRBIT           ;Just add $30 (0-7)
  1527 00:E78E: E9 08                        SBC     #$08            ;Subtract $08 - convert $8-$F to $0-$7
  1528 00:E790: 18           SRBIT           CLC                     ;Convert bit selector value to an ASCII decimal digit
  1529 00:E791: 69 30                        ADC     #$30            ;add "0" to bit selector value
  1530 00:E793: 20 3C FF                     JSR     B_CHROUT        ;Send digit to terminal
  1531 00:E796: 20 96 E1                     JSR     SPC             ;Send a space to terminal
  1532 00:E799: 80 84                        BRA     PRT1_OP         ;Display operand byte again then return
  1533                        ;
  1534                        ;ZP_BBX: three byte instruction: branch on zero-page bit set/clear
  1535 00:E79B: 20 DC E7     ZP_BBX          JSR     SRMB2           ;Display operand/mnemonic, isolate bit selector from opcode
  1536 00:E79E: C9 08                        CMP     #$08            ;Check if $0-$7 or $8-$F
  1537 00:E7A0: 90 02                        BCC     SRBIT2          ;Just add $30 ($0-$7)
  1538 00:E7A2: E9 08                        SBC     #$08            ;Subtract $08 - convert $8-$F to $0-$7
  1539 00:E7A4: 20 90 E7     SRBIT2          JSR     SRBIT           ;Convert and display bit selector digit
  1540 00:E7A7: A5 D7                        LDA     CRCHI           ;Move second operand to first operand position:
  1541 00:E7A9: 85 D8                        STA     CRCLO           ;CRCLO = branch offset
  1542 00:E7AB: 20 96 E1                     JSR     SPC             ;Send a space to terminal
  1543 00:E7AE: 80 03                        BRA     BBX_REL         ;Display branch target address then return
  1544                        ;
  1545                        ;RELATIVE BRANCH: two byte relative branch mode BBX_REL: three byte relative branch mode
  1546                        ; Both calculate then display relative branch target address
  1547 00:E7B0: 20 AE E6     REL_BRA         JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1548 00:E7B3: 20 9B E1     BBX_REL         JSR     DOLLAR          ;Send "$" to terminal
  1549 00:E7B6: 20 71 E1                     JSR     INCINDEX        ;Increment address, ref for branch offset
  1550 00:E7B9: A5 D8                        LDA     CRCLO           ;Get branch operand value
  1551 00:E7BB: 30 0A                        BMI     BRA_MINUS       ;Check for $80 or higher (branch is + / -)
  1552 00:E7BD: 18                           CLC                     ;Clear carry for add
  1553 00:E7BE: 65 C0                        ADC     INDEXL          ;Add to Index lo
  1554 00:E7C0: A8                           TAY                     ;Xfer to Y reg
  1555 00:E7C1: A5 C1                        LDA     INDEXH          ;Get Index Hi
  1556 00:E7C3: 69 00                        ADC     #$00            ;Add result from Carry flag to A reg
  1557 00:E7C5: 80 0F                        BRA     REL_EXT         ;Print offset, cleanup, return
  1558 00:E7C7: 49 FF        BRA_MINUS       EOR     #$FF            ;Get 1's complement of offset
  1559 00:E7C9: 1A                           INC     A               ;Increment by 1
  1560 00:E7CA: 85 D4                        STA     TEMP3           ;Save result
  1561 00:E7CC: 38                           SEC                     ;Set carry for subtract
  1562 00:E7CD: A5 C0                        LDA     INDEXL          ;Get address low
  1563 00:E7CF: E5 D4                        SBC     TEMP3           ;Subtract branch offset
  1564 00:E7D1: A8                           TAY                     ;Xfer to Y reg
  1565 00:E7D2: A5 C1                        LDA     INDEXH          ;Get address high
  1566 00:E7D4: E9 00                        SBC     #$00            ;Subtract carry flag
  1567 00:E7D6: 20 DE E1     REL_EXT         JSR     PRWORD          ;Send address to terminal
  1568 00:E7D9: 4C 68 E1                     JMP     DECINDEX        ;Decrement working address, return
  1569                        ;
  Mon Feb 11 2019 10:21                                                                                                    Page 26


  1570                        ;SRMB2 subroutine: display 2 operand bytes, mnemonic, isolate bit selector from opcode
  1571                        ; SRMB subroutine: display 1 operand byte, mnemonic, isolate bit selector from opcode
  1572 00:E7DC: B2 C0        SRMB2           LDA     (INDEXL)        ;Read from working index
  1573 00:E7DE: 48                           PHA                     ;Save byte to stack
  1574 00:E7DF: 20 AC E6                     JSR     TRI_BYTE        ;Display operand bytes and mnemonic
  1575 00:E7E2: 80 06                        BRA     SRM             ;Skip down
  1576 00:E7E4: B2 C0        SRMB            LDA     (INDEXL)        ;Read from working index
  1577 00:E7E6: 48                           PHA                     ;Save byte on STACK
  1578 00:E7E7: 20 AE E6                     JSR     TWO_BYTE        ;Display operand byte and mnemonic
  1579 00:E7EA: 20 8B E1     SRM             JSR     BSOUT2T         ;Send 2 Backspaces
  1580 00:E7ED: 68                           PLA                     ;Restore byte from stack
  1581 00:E7EE: 4A                           LSR     A               ;Shift high nibble to low nibble
  1582 00:E7EF: 4A                           LSR     A
  1583 00:E7F0: 4A                           LSR     A
  1584 00:E7F1: 4A                           LSR     A
  1585 00:E7F2: 60           NOCHAR          RTS                     ;Done SRMB2/SRMB, return
  1586                        ;END OF DISASSEMBLER CODE
  1587                        ;
  1588                        ;[CNTRL-E] EEPROM Edit
  1589                        ; Allows editing of a single byte location within the EEPROM starting at $8000.
  1590                        ; Note that this routines tests for target addresses at $8000 or above, but does NOT
  1591                        ; test for I/O address ranges. One should be cautious about editing the EEPROM directly
  1592                        ; to ensure it doesn't become unusable by changing things wrongly.
  1593 00:E7F3: A9 31        EEDIT           LDA     #$31            ;Get EEPROM edit msg
  1594 00:E7F5: 20 54 E8                     JSR     PROMPT          ;Send to console
  1595 00:E7F8: 20 34 E2                     JSR     CONTINUE        ;Prompt User for Y/N
  1596 00:E7FB: 20 A3 E1                     JSR     CROUT           ;Send CR/LF to console
  1597                        ;Xfer byte write code to RAM for execution
  1598 00:E7FE: 20 D5 E3                     JSR     XFER_BYTE_WRT   ;Xfer byte write code to Page Zero
  1599                        ;
  1600 00:E801: A9 03        EECONT          LDA     #$03            ;Get " addr:" msg
  1601 00:E803: 20 10 E1                     JSR     HEX4            ;Display msg and get address
  1602                        ; Note: address in INDEXL/INDEXH and A/Y regs
  1603 00:E806: 85 CA                        STA     TGTL            ;Store in Target location Low
  1604 00:E808: 84 CB                        STY     TGTH            ;Store in Target location High
  1605 00:E80A: C0 80                        CPY     #$80            ;Check for ROM start or higher
  1606 00:E80C: 90 2C                        BCC     NOT_ROM         ;Address is not in EEPROM
  1607                        ;
  1608 00:E80E: 20 93 E1                     JSR     SPC2            ;Send 2 spaces
  1609 00:E811: B2 C0                        LDA     (INDEXL)        ;Get memory data
  1610 00:E813: 20 C8 E1                     JSR     PRBYTE          ;Send to console
  1611 00:E816: 20 88 E1                     JSR     BSOUT3T         ;Backspace 3 times
  1612 00:E819: 20 20 E1                     JSR     HEXIN2          ;Get new data
  1613                        ; Note: new data is in A reg
  1614 00:E81C: 85 D3                        STA     TEMP2           ;Store in Temp location
  1615 00:E81E: A9 D3                        LDA     #<TEMP2         ;Get address offset for TEMP2
  1616 00:E820: 85 C8                        STA     SRCL            ;Store in Source address Low
  1617 00:E822: 64 C9                        STZ     SRCH            ;Zero Source address High (Page Zero)
  1618                        ;
  1619 00:E824: 20 90 00                     JSR     BURN_BYTE       ;Update EEPROM Data
  1620 00:E827: B2 C8                        LDA     (SRCL)          ;Get Source byte
  1621 00:E829: D2 CA                        CMP     (TGTL)          ;Compare to Target in EEPROM
  1622 00:E82B: F0 05                        BEQ     CMP_OK2         ;Branch if okay
  1623 00:E82D: A9 25                        LDA     #$25            ;Else, get error msg for failed write
  1624 00:E82F: 4C 54 E8                     JMP     PROMPT          ;Send to console and exit
  1625                        ;
  1626 00:E832: 20 34 E2     CMP_OK2         JSR     CONTINUE        ;Prompt to continue for another byte
  1627 00:E835: 20 A3 E1                     JSR     CROUT           ;Send CR/LF to console for new line
  1628 00:E838: 80 C7                        BRA     EECONT          ;Branch back to edit more
  1629                        ;
  1630 00:E83A: A9 32        NOT_ROM         LDA     #$32            ;Get EEPROM address range msg
  1631 00:E83C: 20 54 E8                     JSR     PROMPT          ;Send to console
  1632 00:E83F: 80 C0                        BRA     EECONT          ;Branch back and try again
  Mon Feb 11 2019 10:21                                                                                                    Page 27


  1633                        ;
  1634                        ;[CNTRL-V] Version command:
  1635 00:E841: A0 FF        VER             LDY     #>BIOS_MSG      ;Get high offset
  1636 00:E843: A9 D0                        LDA     #<BIOS_MSG      ;Get low offset
  1637 00:E845: 20 4C E8                     JSR     PROMPTR         ;Show BIOS version
  1638 00:E848: A9 15                        LDA     #$15            ;Get Intro substring (version)
  1639 00:E84A: 80 08                        BRA     PROMPT          ;Send to terminal
  1640                        ;
  1641 00:E84C: 84 C7        PROMPTR         STY     PROMPTH         ;Store hi byte
  1642 00:E84E: 85 C6                        STA     PROMPTL         ;Store lo byte
  1643 00:E850: 80 0E                        BRA     PROMPT2         ;Print message
  1644                        ;
  1645                        ;[CNTRL-Q] Query command:
  1646 00:E852: A9 35        QUERY           LDA     #$35            ;Get Query Commands Message
  1647                        ;
  1648                        ;PROMPT routine: Send indexed text string to terminal. Index is contained in A reg.
  1649                        ; String buffer address is stored in variable PROMPTL/PROMPTH. (placing here saves some space).
  1650 00:E854: 0A           PROMPT          ASL     A               ;Multiply by two for msg table index
  1651 00:E855: A8                           TAY                     ;Xfer to index
  1652 00:E856: B9 7D F1                     LDA     MSG_TABLE,Y     ;Get low byte address
  1653 00:E859: 85 C6                        STA     PROMPTL         ;Store in Buffer pointer
  1654 00:E85B: B9 7E F1                     LDA     MSG_TABLE+1,Y   ;Get high byte address
  1655 00:E85E: 85 C7                        STA     PROMPTH         ;Store in Buffer pointer
  1656                        ;
  1657 00:E860: B2 C6        PROMPT2         LDA     (PROMPTL)       ;Get string data
  1658 00:E862: F0 8E                        BEQ     NOCHAR          ;If null character, exit (borrowed RTS)
  1659 00:E864: 20 3C FF                     JSR     B_CHROUT        ;Send character to terminal
  1660 00:E867: E6 C6                        INC     PROMPTL         ;Increment low byte index
  1661 00:E869: D0 F5                        BNE     PROMPT2         ;Loop back for next character
  1662 00:E86B: E6 C7                        INC     PROMPTH         ;Increment high byte index
  1663 00:E86D: 80 F1                        BRA     PROMPT2         ;Loop back and continue printing
  1664                        ;
  1665                        ;[CNTL-T] UPTIME command: Sends a string to the console showing the uptime of the system since
  1666                        ; System Start. Displays RTC values for Days, Hours, Minutes and seconds.
  1667 00:E86F: A9 1A        UPTIME          LDA     #$1A            ;Get Uptime message
  1668 00:E871: 20 54 E8                     JSR     PROMPT          ;Send to terminal
  1669                        ;
  1670 00:E874: A2 1B                        LDX     #$1B            ;Get Days message
  1671 00:E876: A5 F3                        LDA     DAYSL           ;Get Days low byte
  1672 00:E878: A4 F4                        LDY     DAYSH           ;Get Days high byte
  1673 00:E87A: 20 91 E8                     JSR     DO16TIME        ;Convert and send to terminal
  1674                        ;
  1675 00:E87D: A2 1C                        LDX     #$1C            ;Get Hours message
  1676 00:E87F: A5 F2                        LDA     HOURS           ;Get Current Hours (low byte)
  1677 00:E881: 20 8F E8                     JSR     DO8TIME         ;Convert and send to terminal
  1678                        ;
  1679 00:E884: A2 1D                        LDX     #$1D            ;Get Minutes message
  1680 00:E886: A5 F1                        LDA     MINS            ;Get Current Minutes (low byte)
  1681 00:E888: 20 8F E8                     JSR     DO8TIME         ;Convert and send to terminal
  1682                        ;
  1683 00:E88B: A2 1E                        LDX     #$1E            ;Get seconds message
  1684 00:E88D: A5 F0                        LDA     SECS            ;Get Current Seconds (low byte)
  1685                        ;
  1686 00:E88F: A0 00        DO8TIME         LDY     #$00            ;Zero high byte
  1687 00:E891: DA           DO16TIME        PHX                     ;Push message number to stack
  1688 00:E892: 20 D8 E0                     JSR     HEX2ASC         ;Convert and print ASCII string
  1689 00:E895: 68                           PLA                     ;Pull message number from stack
  1690 00:E896: 80 BC                        BRA     PROMPT          ;Branch to Prompt
  1691                        ;
  1692                        ;[CNTRL-S] Xmodem/CRC Save command: Sends data to the Terminal program via Xmodem CRC.
  1693                        ; No cable swapping is required, uses the console UART for all transfers. User must
  1694                        ; enter a starting address for the data and a length, both 16-bit. Once entered, the
  1695                        ; user will need to setup the terminal program to receive data via Xmodem CRC protocol.
  Mon Feb 11 2019 10:21                                                                                                    Page 28


  1696                        ;
  1697                        ; NOTE: Tested with ExtraPutty (Win7) and Serial (OSX). Serial (OSX) has a problem with EOT.
  1698                        ; Serial does not release the port after completed, so the last message does not show!
  1699                        ; I submitted a problem report with their support, they have asked for more detail which I
  1700                        ; provided. Further note: Zoc7 also works properly on OSX, so the problem is with Serial.
  1701 00:E898: 64 D6        XMODEMS         STZ     OPXMDM          ;Clear Xmodem flag
  1702 00:E89A: A9 01                        LDA     #$01            ;Set block count to one
  1703 00:E89C: 85 DC                        STA     BLKNO           ;Save it
  1704                        ;
  1705 00:E89E: A9 29                        LDA     #$29            ;Get Xmodem Save intro msg
  1706 00:E8A0: 20 10 E1                     JSR     HEX4            ;Send msg and get Source address
  1707 00:E8A3: 85 C8                        STA     SRCL            ;Save Source low byte
  1708 00:E8A5: 84 C9                        STY     SRCH            ;Save Source high byte
  1709 00:E8A7: A9 04                        LDA     #$04            ;Get " len:" msg
  1710 00:E8A9: 20 10 E1                     JSR     HEX4            ;Send msg and get length to send
  1711 00:E8AC: 85 CC                        STA     LENL            ;Save Length low byte
  1712 00:E8AE: 84 CD                        STY     LENH            ;Save length high byte
  1713                        ;
  1714                        XMDM_SAVE       ;Entry point for an external program to save data via Xmodem CRC
  1715                        ; Entry at this point assumes that the variables have been setup properly.
  1716                        ; This includes the Source address (SCRL/H), Length (LENL/H), and that the
  1717                        ; Block count has been set to one and the OPXMDM flag has been cleared.
  1718 00:E8B0: A9 2A                        LDA     #$2A            ;Get Terminal Setup message
  1719 00:E8B2: 20 54 E8                     JSR     PROMPT          ;Send to console
  1720                        ;
  1721                        ; User now needs to setup terminal program to receive data via Xmodem/CRC.
  1722                        ;  Once setup, the terminal program will send an ASCII "C" character to signal the start
  1723                        ;  of data transfer. We can prompt the user to terminate the transfer by hitting ESC.
  1724                        ;  Once the transfer starts however, it is basically controlled by the receiving end.
  1725 00:E8B5: 20 39 FF                     JSR     B_CHRIN         ;Wait for a key from the terminal program
  1726 00:E8B8: C9 1B                        CMP     #$1B            ;Check for ESC key
  1727 00:E8BA: F0 25                        BEQ     XMDMQ           ;If yes, quit Xmodem save function
  1728 00:E8BC: C9 43                        CMP     #'C'            ;Check for upper case ASCII "C"
  1729 00:E8BE: D0 21                        BNE     XMDMQ           ;If not, quit Xmodem save function
  1730                        ;
  1731                        ; Terminal has sent an ASCII "C" character to initiate Xmodem/CRC transfer.
  1732                        ;  Note that per protocol, if receiver does not receive data within 3 seconds,
  1733                        ;  it will send another "C" to the device. This dictates the maximum time to
  1734                        ;  assemble the 133-byte block with 16-bit checksum must be less than 3 seconds.
  1735 00:E8C0: A5 DC        SND_LP          LDA     BLKNO           ;Get current block number
  1736 00:E8C2: 8D 7C 03                     STA     RBUFF           ;Store into buffer
  1737 00:E8C5: 49 FF                        EOR     #$FF            ;One's compliment of BLKNO
  1738 00:E8C7: 8D 7D 03                     STA     RBUFF+1         ;Store into buffer
  1739                        ;
  1740                        ; Now assemble 128 byte buffer and 16-bit CRC to send to terminal
  1741                        ;  SRCL/H is the start of the data to be sent. Start by moving 128 bytes into RBUFF
  1742 00:E8CA: A2 00                        LDX     #$00            ;Zero index count
  1743 00:E8CC: A5 CC        XMD_FIL         LDA     LENL            ;Get length low byte
  1744 00:E8CE: 05 CD                        ORA     LENH            ;Or in high byte
  1745 00:E8D0: F0 10                        BEQ     XM_BLK          ;If length is zero, finish last block
  1746 00:E8D2: B2 C8                        LDA     (SRCL)          ;Get a byte from the source
  1747 00:E8D4: 9D 7E 03                     STA     RBUFF+2,X       ;Save it into the buffer
  1748 00:E8D7: 20 53 E1                     JSR     UPD_STL         ;Update source and length variables
  1749 00:E8DA: E8                           INX                     ;Increment count
  1750 00:E8DB: E0 80                        CPX     #$80            ;Compare to 128
  1751 00:E8DD: D0 ED                        BNE     XMD_FIL         ;Loop back until buffer is filled
  1752 00:E8DF: 80 0F                        BRA     DO_UP_CRC       ;Calculate CRC and send block
  1753                        ;
  1754 00:E8E1: 60           XMDMQ           RTS                     ;Xmodem upload cancelled, return to Monitor
  1755                        ;
  1756                        ;As each Xmodem block must contain 128 bytes, if the total amount data to be sent is less than
  1757                        ; 128 bytes, then the block must be padded to fill up the remaining space. By protocol
  1758                        ; definition, the default fill byte is hex $1E. The routine above checks the length during
  Mon Feb 11 2019 10:21                                                                                                    Page 29


  1759                        ; each byte transfer into the block buffer and will arrive here upon the length going to zero.
  1760                        ; Having arrived here with no more data to put into a block, we must determine if it's the
  1761                        ; last block and ensure that the block if a filled 128 bytes with the proper $1E padding
  1762                        ; character for any unused data space.
  1763 00:E8E2: E0 80        XM_BLK          CPX     #$80            ;Check for X reg at 128 bytes
  1764 00:E8E4: F0 08                        BEQ     LAST_BLK        ;If yes, complete last block and exit
  1765 00:E8E6: A9 1A        LST_BKLP        LDA     #$1A            ;Get padding character
  1766 00:E8E8: 9D 7E 03                     STA     RBUFF+2,X       ;Place into buffer
  1767 00:E8EB: E8                           INX                     ;Increment count
  1768 00:E8EC: 80 F4                        BRA     XM_BLK          ;Loop back until done
  1769 00:E8EE: 97 D6        LAST_BLK        SMB1    OPXMDM          ;Set bit in flag for last block
  1770                        ;
  1771                        ; Now calculate the 16-bit CRC value and add into buffer
  1772 00:E8F0: 20 4A E9     DO_UP_CRC       JSR     CRC16_GEN       ;Generate CRC for block
  1773                        ;
  1774 00:E8F3: A5 D7                        LDA     CRCHI           ;Get calculated CRC hi byte
  1775 00:E8F5: 99 7E 03                     STA     RBUFF+2,Y       ;Save into buffer
  1776 00:E8F8: A5 D8                        LDA     CRCLO           ;Get calculated CRC lo byte
  1777 00:E8FA: 99 7F 03                     STA     RBUFF+3,Y       ;Save into buffer
  1778                        ;
  1779                        ; Buffer now has Block number/block compliment, 128 bytes of data and a 16-bit CRC
  1780 00:E8FD: A9 01        RE_SEND         LDA     #SOH            ;Get start of header code
  1781 00:E8FF: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1782                        ;
  1783 00:E902: A2 00                        LDX     #$00            ;Zero index count
  1784 00:E904: BD 7C 03     BLK_SND         LDA     RBUFF,X         ;Get Buffer data
  1785 00:E907: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1786 00:E90A: E8                           INX                     ;Increment count
  1787 00:E90B: E0 84                        CPX     #$84            ;Check for all bytes sent
  1788 00:E90D: D0 F5                        BNE     BLK_SND         ;Branch back till buffer sent
  1789                        ;
  1790                        ; Buffer sent, now check for either an ACK or NAK from the terminal to confirm receive
  1791 00:E90F: 20 39 FF     CHK_LAST        JSR     B_CHRIN         ;Get a character back from the terminal
  1792 00:E912: C9 06                        CMP     #ACK            ;Check for good receive
  1793 00:E914: D0 0D                        BNE     BAD_RCV         ;Branch if error
  1794 00:E916: 9F D6 1C                     BBS1    OPXMDM,XMUPDON  ;If last block sent, exit
  1795 00:E919: A5 CC                        LDA     LENL            ;Check for zero length left
  1796 00:E91B: 05 CD                        ORA     LENH            ; - Even block size will be zero
  1797 00:E91D: F0 14                        BEQ     ZERO_BLK        ;If zero, just set bit and finish up
  1798 00:E91F: E6 DC                        INC     BLKNO           ;Increment block count to next
  1799 00:E921: 80 9D                        BRA     SND_LP          ;Branch back to send next block
  1800                        ;
  1801                        ; ACK not received from terminal, check for NAK
  1802 00:E923: C9 15        BAD_RCV         CMP     #NAK            ;Check for NAK
  1803 00:E925: F0 D6                        BEQ     RE_SEND         ;Resend block
  1804                        ;
  1805                        ; Unknown error at the this point... ACK or NAK not received.
  1806                        ;  Cancel the transfer with two CAN characters and return to Monitor
  1807 00:E927: A9 18                        LDA     #CAN            ;Get cancel code
  1808 00:E929: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1809 00:E92C: A9 18                        LDA     #CAN            ;Get cancel code
  1810 00:E92E: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal and return to caller
  1811 00:E931: 80 13                        BRA     XMDM_ERR        ;Finish up with error message and exit
  1812                        ;
  1813 00:E933: 97 D6        ZERO_BLK        SMB1    OPXMDM          ;Set bit for last block
  1814                        ;
  1815                        ;Transfer is now completed. Last block was received properly. So we should
  1816                        ; send a EOT character and return to the Monitor.
  1817 00:E935: A9 04        XMUPDON         LDA     #EOT            ;Get end of transmission character
  1818 00:E937: 20 3C FF                     JSR     B_CHROUT        ;Sent to terminal
  1819 00:E93A: 20 39 FF                     JSR     B_CHRIN         ;Get a character back from terminal
  1820 00:E93D: C9 06                        CMP     #ACK            ;Check for completion of transfer
  1821 00:E93F: D0 05                        BNE     XMDM_ERR        ;Branch if an error occurred
  Mon Feb 11 2019 10:21                                                                                                    Page 30


  1822 00:E941: A9 2B                        LDA     #$2B            ;Else, get complete msg
  1823 00:E943: 4C 54 E8     XMDM_NE         JMP     PROMPT          ;Send to console and return
  1824                        ;
  1825 00:E946: A9 2C        XMDM_ERR        LDA     #$2C            ;Get xfer fail msg
  1826 00:E948: 80 F9                        BRA     XMDM_NE         ;Send message and return to Monitor
  1827                        ;
  1828                        ; CRC-16 Generation program. This routine generates the 16-bit CRC for the 128 byte
  1829                        ;  data block stored in RBUFF. It is a separate routine as it's used in both the
  1830                        ;  Xmodem load and save routines. It saves 31 bytes with a small penalty in speed.
  1831 00:E94A: 64 D8        CRC16_GEN       STZ     CRCLO           ;Reset the CRC value by
  1832 00:E94C: 64 D7                        STZ     CRCHI           ;putting all bits off
  1833 00:E94E: A0 00                        LDY     #$00            ;Set index for data offset
  1834 00:E950: B9 7E 03     CALCCRC         LDA     RBUFF+2,Y       ;Get first data byte
  1835 00:E953: 08                           PHP                     ;Save status reg
  1836 00:E954: A2 08                        LDX     #$08            ;Load index for 8 bits
  1837 00:E956: 45 D7                        EOR     CRCHI           ;XOR High CRC byte
  1838 00:E958: 06 D8        CRCLOOP         ASL     CRCLO           ;Shift carry to CRC low byte
  1839 00:E95A: 2A                           ROL     A               ;Shift bit to carry flag
  1840 00:E95B: 90 0A                        BCC     CRCLP1          ;Branch if MSB is 1
  1841 00:E95D: 49 10                        EOR     #$10            ;Exclusive OR with polynomial
  1842 00:E95F: 48                           PHA                     ;Save result on stack
  1843 00:E960: A5 D8                        LDA     CRCLO           ;Get CRC low byte
  1844 00:E962: 49 21                        EOR     #$21            ;Exclusive OR with polynomial
  1845 00:E964: 85 D8                        STA     CRCLO           ;Save it back
  1846 00:E966: 68                           PLA                     ;Get previous result
  1847 00:E967: CA           CRCLP1          DEX                     ;Decrement index
  1848 00:E968: D0 EE                        BNE     CRCLOOP         ;Loop back for all 8 bits
  1849 00:E96A: 85 D7                        STA     CRCHI           ;Update CRC high byte
  1850 00:E96C: 28                           PLP                     ;Restore status reg
  1851 00:E96D: C8                           INY                     ;Increment index to the next data byte
  1852 00:E96E: 10 E0                        BPL     CALCCRC         ;Branch back until all 128 fed to CRC routine
  1853 00:E970: 60                           RTS                     ;Return to caller
  1854                        ;
  1855                        ;[CNTRL-L] Xmodem/CRC Load command: receives a file from console via Xmodem protocol. no cable
  1856                        ; swapping needed, uses Console port and buffer via the terminal program. Not a full Xmodem/CRC
  1857                        ; implementation, only does CRC-16 checking, no fallback. Designed for direct attach to host
  1858                        ; machine via com port. Can handle full 8-bit binary transfers without errors.
  1859                        ; Tested with: ExtraPutty (Windows 7 Pro) and Serial (OSX).
  1860                        ;
  1861                        ;Added support for Motorola S-Record formatted files automatically. Default load address is $0800.
  1862                        ; An input parameter is used as a Load Address (for non-S-Record files) or as a positive offset for
  1863                        ; any S-Record formatted file. The supported S-Record format is S19 as created by WDC Tools Linker.
  1864                        ; Note: this code supports the execution address in the final S9 record, but WDC Tools does not
  1865                        ; provide any ability to put this into their code build. WDC are aware of this.
  1866 00:E971: F7 D5        XMODEML         SMB7    CMDFLAG         ;Set bit7 of command flag
  1867 00:E973: 64 D6                        STZ     OPXMDM          ;Clear Xmodem flag
  1868 00:E975: A9 01                        LDA     #$01            ;Set block count to one
  1869 00:E977: 85 DC                        STA     BLKNO           ;Save it for starting block #
  1870                        ;
  1871 00:E979: A9 28                        LDA     #$28            ;Get Xmodem intro msg
  1872 00:E97B: 20 10 E1                     JSR     HEX4            ;Print Msg, get Hex load address/S-record Offset
  1873 00:E97E: 20 A3 E1                     JSR     CROUT           ;Send a C/R to show input entered
  1874 00:E981: E0 00                        CPX     #$00            ;Check for input entered (if non-zero, use new data)
  1875 00:E983: D0 03                        BNE     XLINE           ;Branch if data entered
  1876 00:E985: 8A                           TXA                     ;Xfer to A reg (LDA #$00)
  1877 00:E986: A0 08                        LDY     #$08            ;Set High byte ($0800)
  1878 00:E988: 85 DA        XLINE           STA     PTRL            ;Store to Lo pointer
  1879 00:E98A: 84 DB                        STY     PTRH            ;Store to Hi pointer
  1880                        ;
  1881                        XMDM_LOAD ;Entry point for an eternal program to load data via Xmodem CRC
  1882                        ; To use this routine, the external program must setup the variables above which include
  1883                        ; the starting address (PTRL/H), clear the OPXMDM flag and set the Block count to one.
  1884                        ; Once completed, the message to setup the terminal program is displayed and the user
  Mon Feb 11 2019 10:21                                                                                                    Page 31


  1885                        ; needs to setup the terminal to send data via a filename.
  1886                        ;
  1887                        ; A 5 seconds delay is started to allow the user time to navigate to the file to be sent.
  1888 00:E98C: A9 2A                        LDA     #$2A            ;Get Terminal Setup msg
  1889 00:E98E: 20 54 E8                     JSR     PROMPT          ;Send to console
  1890                        ;
  1891                        ;Wait for 5 seconds for user to setup xfer from terminal
  1892 00:E991: A9 01                        LDA     #$01            ;Set milliseconds to 1(*10 ms)
  1893 00:E993: A2 01                        LDX     #$01            ;Set 16-bit multiplier
  1894 00:E995: A0 F4                        LDY     #$F4            ;to 500 decimal ($1F4)
  1895 00:E997: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
  1896 00:E99A: 20 45 FF                     JSR     B_EXE_LGDLY     ;Call long delay for 5 seconds
  1897                        ;
  1898 00:E99D: A9 43        STRT_XFER       LDA     #"C"            ;Send "C" character for CRC mode
  1899 00:E99F: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1900 00:E9A2: A0 32                        LDY     #50             ;Set loop count to 50
  1901 00:E9A4: 20 42 FF     CHR_DLY         JSR     B_EXE_MSDLY     ;Delay 1*(10ms)
  1902 00:E9A7: A5 E7                        LDA     ICNT            ;Check input buffer count
  1903 00:E9A9: D0 38                        BNE     STRT_BLK        ;If a character is in, branch
  1904 00:E9AB: 88                           DEY                     ;Decrement loop count
  1905 00:E9AC: D0 F6                        BNE     CHR_DLY         ;Branch and check again
  1906 00:E9AE: 80 ED                        BRA     STRT_XFER       ;Else, branch and send another "C"
  1907                        ;
  1908 00:E9B0: A9 06        XDONE           LDA     #ACK            ;Last block, get ACK character
  1909 00:E9B2: 20 3C FF                     JSR     B_CHROUT        ;Send final ACK
  1910 00:E9B5: A0 02                        LDY     #$02            ;Get delay count
  1911 00:E9B7: A9 2B                        LDA     #$2B            ;Get Good xfer message number
  1912 00:E9B9: 20 92 E2     FLSH_DLY        JSR     NOLOOPS         ;Zero input buffer pointers
  1913 00:E9BC: 48                           PHA                     ;Save Message number
  1914 00:E9BD: A9 19                        LDA     #$19            ;Load milliseconds = 250 ms (25x10ms)
  1915 00:E9BF: A2 00                        LDX     #$00            ;Load High multiplier to 0 decimal
  1916 00:E9C1: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
  1917 00:E9C4: 20 45 FF                     JSR     B_EXE_LGDLY     ;Execute delay, (wait to get terminal back)
  1918 00:E9C7: 68                           PLA                     ;Get message number back
  1919 00:E9C8: C9 2C                        CMP     #$2C            ;Check for error msg#
  1920 00:E9CA: F0 14                        BEQ     SHRT_EXIT       ;Do only one message
  1921 00:E9CC: 48                           PHA                     ;Save MSG number
  1922 00:E9CD: 7F D6 0F                     BBR7    OPXMDM,END_LOAD ;Branch if no S-Record
  1923 00:E9D0: A9 2D                        LDA     #$2D            ;Get S-Record load address msg
  1924 00:E9D2: 20 54 E8                     JSR     PROMPT          ;Printer header msg
  1925 00:E9D5: A5 C9                        LDA     SRCH            ;Get source high byte
  1926 00:E9D7: A4 C8                        LDY     SRCL            ;Get source low byte
  1927 00:E9D9: 20 DE E1                     JSR     PRWORD          ;Print Hex address
  1928 00:E9DC: 20 A3 E1                     JSR     CROUT           ;Print C/R and return
  1929 00:E9DF: 68           END_LOAD        PLA                     ;Get Message number
  1930 00:E9E0: 4C 54 E8     SHRT_EXIT       JMP     PROMPT          ;Print Message and exit
  1931                        ;
  1932 00:E9E3: 20 39 FF     STRT_BLK        JSR     B_CHRIN         ;Get a character
  1933 00:E9E6: C9 1B                        CMP     #$1B            ;Is it escape - quit?
  1934 00:E9E8: F0 0A                        BEQ     XM_END          ;If yes, exit
  1935 00:E9EA: C9 01                        CMP     #SOH            ;Start of header?
  1936 00:E9EC: F0 07                        BEQ     GET_BLK         ;If yes, branch and receive block
  1937 00:E9EE: C9 04                        CMP     #EOT            ;End of Transmission?
  1938 00:E9F0: F0 BE                        BEQ     XDONE           ;If yes, branch and exit
  1939 00:E9F2: 80 3C                        BRA     STRT_ERR        ;Else branch to error
  1940 00:E9F4: 60           XM_END          RTS                     ;Cancelled by user, return
  1941                        ;
  1942 00:E9F5: A2 00        GET_BLK         LDX     #$00            ;Zero index for block receive
  1943                        ;
  1944 00:E9F7: 20 39 FF     GET_BLK1        JSR     B_CHRIN         ;Get a character
  1945 00:E9FA: 9D 7C 03                     STA     RBUFF,X         ;Move into buffer
  1946 00:E9FD: E8                           INX                     ;Increment buffer index
  1947 00:E9FE: E0 84                        CPX     #$84            ;Compare size (<01><FE><128 bytes><CRCH><CRCL>)
  Mon Feb 11 2019 10:21                                                                                                    Page 32


  1948 00:EA00: D0 F5                        BNE     GET_BLK1        ;If not done, loop back and continue
  1949                        ;
  1950 00:EA02: AD 7C 03                     LDA     RBUFF           ;Get block number from buffer
  1951 00:EA05: C5 DC                        CMP     BLKNO           ;Compare to expected block number
  1952 00:EA07: D0 07                        BNE     RESTRT          ;If not correct, restart the block
  1953 00:EA09: 49 FF                        EOR     #$FF            ;Create one's complement of block number
  1954 00:EA0B: CD 7D 03                     CMP     RBUFF+1         ;Compare with rcv'd value for block number
  1955 00:EA0E: F0 07                        BEQ     BLK_OKAY        ;Branch if compare is good
  1956                        ;
  1957 00:EA10: A9 15        RESTRT          LDA     #NAK            ;Get NAK character
  1958 00:EA12: 20 3C FF     RESTRT2         JSR     B_CHROUT        ;Send to xfer program
  1959 00:EA15: 80 CC                        BRA     STRT_BLK        ;Restart block transfer
  1960                        ;
  1961 00:EA17: A9 0A        BLK_OKAY        LDA     #$0A            ;Set retry value to 10
  1962 00:EA19: 85 D9                        STA     CRCCNT          ;Save it to CRC retry count
  1963                        ;
  1964 00:EA1B: 20 4A E9                     JSR     CRC16_GEN       ;Generate CRC16 from Buffer data
  1965                        ;
  1966 00:EA1E: B9 7E 03                     LDA     RBUFF+2,Y       ;Get received CRC hi byte (4)
  1967 00:EA21: C5 D7                        CMP     CRCHI           ;Compare against calculated CRC hi byte (3)
  1968 00:EA23: D0 07                        BNE     BADCRC          ;If bad CRC, handle error (2/3)
  1969 00:EA25: B9 7F 03                     LDA     RBUFF+3,Y       ;Get CRC lo byte (4)
  1970 00:EA28: C5 D8                        CMP     CRCLO           ;Compare against calculated CRC lo byte (3)
  1971 00:EA2A: F0 15                        BEQ     GOODCRC         ;If good, go move frame to memory (2/3)
  1972                        ;
  1973                        ;CRC was bad! Need to retry and receive the last frame again. Decrement the CRC retry count,
  1974                        ; send a NAK and try again. Count allows up to 10 retries, then cancels the transfer.
  1975 00:EA2C: C6 D9        BADCRC          DEC     CRCCNT          ;Decrement retry count
  1976 00:EA2E: D0 0C                        BNE     CRCRTRY         ;Retry again if count not zero
  1977 00:EA30: A9 18        STRT_ERR        LDA     #CAN            ;Else get Cancel code
  1978 00:EA32: 20 3C FF                     JSR     B_CHROUT        ;Send it to terminal program
  1979 00:EA35: A0 08                        LDY     #$08            ;Set delay multiplier
  1980 00:EA37: A9 2C                        LDA     #$2C            ;Get message for receive error
  1981 00:EA39: 4C B9 E9                     JMP     FLSH_DLY        ;Do a flush, delay and exit
  1982 00:EA3C: 20 92 E2     CRCRTRY         JSR     NOLOOPS         ;Zero Input buffer pointers
  1983 00:EA3F: 80 CF                        BRA     RESTRT          ;Send NAK and retry
  1984                        ;
  1985                        ;Block has been received, check for S19 record transfer
  1986 00:EA41: FF D6 2D     GOODCRC         BBS7    OPXMDM,XFER_S19 ;Branch if bit 7 set (active S-record)
  1987 00:EA44: A5 DC                        LDA     BLKNO           ;Else, check current block number
  1988 00:EA46: 3A                           DEC     A               ;Check for block 1 only (first time thru)
  1989 00:EA47: F0 16                        BEQ     TEST_S19        ;If yes, test for S19 record
  1990                        ;
  1991 00:EA49: A2 00        MOVE_BLK        LDX     #$00            ;Zero index offset to data
  1992 00:EA4B: BD 7E 03     COPYBLK         LDA     RBUFF+2,X       ;Get data byte from buffer
  1993 00:EA4E: 92 DA                        STA     (PTRL)          ;Store to target address
  1994 00:EA50: E6 DA                        INC     PTRL            ;Increment low address byte
  1995 00:EA52: D0 02                        BNE     COPYBLK2        ;Check for hi byte loop
  1996 00:EA54: E6 DB                        INC     PTRH            ;Increment hi byte address
  1997 00:EA56: E8           COPYBLK2        INX                     ;Point to next data byte
  1998 00:EA57: 10 F2                        BPL     COPYBLK         ;Loop back until done (128)
  1999 00:EA59: E6 DC        INCBLK          INC     BLKNO           ;Increment block number
  2000 00:EA5B: A9 06                        LDA     #ACK            ;Get ACK character
  2001 00:EA5D: 80 B3                        BRA     RESTRT2         ;Send ACK and continue xfer
  2002                        ;
  2003 00:EA5F: AD 7E 03     TEST_S19        LDA     RBUFF+2         ;Get first character
  2004 00:EA62: C9 53                        CMP     #"S"            ;Check for S character
  2005 00:EA64: D0 E3                        BNE     MOVE_BLK        ;If not equal, no S-record, move block
  2006 00:EA66: AD 7F 03                     LDA     RBUFF+3         ;Get second character
  2007 00:EA69: C9 31                        CMP     #"1"            ;Check for 1 character
  2008 00:EA6B: D0 DC                        BNE     MOVE_BLK        ;If not equal, no S-record, move block
  2009 00:EA6D: F7 D6                        SMB7    OPXMDM          ;Set bit 7 for S-record xfer
  2010 00:EA6F: 64 D1                        STZ     IDY             ;Zero index for SRBUFF
  Mon Feb 11 2019 10:21                                                                                                    Page 33


  2011                        ;
  2012                        ;S-Record transfer routine: Xmodem is a 128 byte data block, S-Record is variable, up to
  2013                        ; 44 bytes needed to move a record at a time to the SRBUFF based on length, check as valid,
  2014                        ; then calculate the address and transfer to that location. Once the Xmodem buffer is empty,
  2015                        ; loop back to get the next block and continue processing S-Records until completed.
  2016                        ;
  2017                        ;RBUFF is the full Xmodem block, which starts with the block number, one's compliment of the
  2018                        ; block number, followed by the 128-bytes of data. The data is confirmed as "S1", which validates
  2019                        ; the start of a S-Record format.
  2020                        ;
  2021                        ;At first entry here, pointer IDY is zero. At all entries here, a 128 byte block has been received.
  2022                        ; The S-record type and length length needs to be calculated, then the proper count moved to the
  2023                        ; SRBUFF location and both pointers (IDX/IDY) are updated.
  2024                        ;
  2025                        ;S-Record format is as follows (44 bytes max):
  2026                        ; 2 bytes for type: "S1" or "S9" (ASCII text)
  2027                        ; 2 bytes for length (ASCII Hex) - includes load address, data and checksum (not CR/LF)
  2028                        ; 4 bytes for load address (ASCII Hex - 16-bit load address)
  2029                        ; 2-32 bytes for data (ASCII Hex - 1-16 bytes of data) - always an even number
  2030                        ; 2 bytes for checksum (ASCII Hex - 1 byte for checksum)
  2031                        ; 2 bytes for CR/LF
  2032                        ;
  2033                        ;First grab the 2 bytes for the length, convert to binary and transfer the correct count of
  2034                        ; data from RBUFF to SRBUFF. Note: increment count by two additional for CR/LF
  2035                        ; then update the running index into the 128 byte record (IDX) which points to the next record.
  2036 00:EA71: 64 D0        XFER_S19        STZ     IDX             ;Zero offset to RBUFF
  2037                        ;
  2038 00:EA73: A6 D0        S19_LOOP2       LDX     IDX             ;Load current offset to RBUFF
  2039 00:EA75: A4 D1                        LDY     IDY             ;Get current offset SRBUFF
  2040 00:EA77: C0 00                        CPY     #$00            ;Check if RBUFF to SRBUFF is incomplete
  2041 00:EA79: D0 11                        BNE     FIL_SRBUFF      ;Branch to complete RBUFF to SRBUFF xfer
  2042                        ;
  2043 00:EA7B: BD 80 03                     LDA     RBUFF+4,X       ;Get first ASCII length character
  2044 00:EA7E: BC 81 03                     LDY     RBUFF+5,X       ;Get second ASCII length character
  2045 00:EA81: 20 8E E0                     JSR     ASC2BIN         ;Convert to binary length
  2046 00:EA84: 1A                           INC     A               ;Increment length for "S1" or "S9"
  2047 00:EA85: 1A                           INC     A               ;Increment length for "length characters"
  2048 00:EA86: 1A                           INC     A               ;Increment length for "CR/LF"
  2049 00:EA87: 0A                           ASL     A               ;Multiply by two for 2-characters per byte
  2050 00:EA88: 85 D4                        STA     TEMP3           ;Save total bytes to move to SRBUFF
  2051 00:EA8A: A4 D1                        LDY     IDY             ;Get offset to SRBUFF
  2052                        ;
  2053 00:EA8C: BD 7E 03     FIL_SRBUFF      LDA     RBUFF+2,X       ;Get S-Record data
  2054 00:EA8F: 99 50 03                     STA     SRBUFF,Y        ;Move into SREC buffer
  2055 00:EA92: E8                           INX                     ;Increment index to RBUFF
  2056 00:EA93: E0 81                        CPX     #$81            ;Check for end of buffer
  2057 00:EA95: F0 0E                        BEQ     NXT_FRAME       ;If yes, go receive another block into the buffer
  2058 00:EA97: C8                           INY                     ;Increment index to SRBUFF
  2059 00:EA98: C4 D4                        CPY     TEMP3           ;Compare to length
  2060 00:EA9A: D0 F0                        BNE     FIL_SRBUFF      ;Loop back until the full record is moved to SRBUFF
  2061                        ;
  2062 00:EA9C: 86 D0                        STX     IDX             ;Update running offset to RBUFF
  2063 00:EA9E: 64 D1                        STZ     IDY             ;Reset SRBUFF index pointer (for next S-record xfer)
  2064 00:EAA0: 20 A9 EA                     JSR     SREC_PROC       ;Process the S-Record in SRBUFF
  2065 00:EAA3: 80 CE                        BRA     S19_LOOP2       ;Branch back and get another S-Record
  2066                        ;
  2067 00:EAA5: 84 D1        NXT_FRAME       STY     IDY             ;Save SRBUFF offset
  2068 00:EAA7: 80 B0        INCBLK2         BRA     INCBLK          ;Increment block and get next frame
  2069                        ;
  2070 00:EAA9: AD 51 03     SREC_PROC       LDA     SRBUFF+1        ;Get the Record type character
  2071 00:EAAC: C9 31                        CMP     #"1"            ;Check for S1 record
  2072 00:EAAE: F0 54                        BEQ     S1_PROC         ;Process a S1 record
  2073 00:EAB0: C9 39                        CMP     #"9"            ;Check for S9 (final) record
  Mon Feb 11 2019 10:21                                                                                                    Page 34


  2074 00:EAB2: F0 3F                        BEQ     S9_PROC         ;Process a S9 record
  2075 00:EAB4: 68           SREC_ERR        PLA                     ;Else, pull return address
  2076 00:EAB5: 68                           PLA                     ;of two bytes from stack
  2077 00:EAB6: 4C 30 EA                     JMP     STRT_ERR        ;Branch to Xmodem error/exit routine
  2078                        ;
  2079                        ;This routine will decode the SRBUFF ASCII data to binary data.
  2080                        ; As each byte is two ASCII characters, the result is half the length.
  2081                        ; TEMP3 contains the overall length from above, plus extra to add in the "S1" or "S9" and CR/LF
  2082                        ; so we need to decrement TEMP3 by two to correct the required length.
  2083 00:EAB9: C6 D4        SR_PROC         DEC     TEMP3           ;Decrement length
  2084 00:EABB: C6 D4                        DEC     TEMP3           ;Decrement length
  2085                        ;
  2086 00:EABD: A2 00        SR_COMP         LDX     #$00            ;Zero Index
  2087 00:EABF: A0 00                        LDY     #$00            ;Zero Index
  2088 00:EAC1: 5A           SR_CMPLP        PHY                     ;Save Y reg index
  2089 00:EAC2: BC 53 03                     LDY     SRBUFF+3,X      ;get LS character
  2090 00:EAC5: BD 52 03                     LDA     SRBUFF+2,X      ;Get MS character
  2091 00:EAC8: 20 8E E0                     JSR     ASC2BIN         ;Convert two ASCII characters to HEX byte
  2092 00:EACB: 7A                           PLY                     ;Restore Y reg index
  2093 00:EACC: 99 50 03                     STA     SRBUFF,Y        ;Store in SRBUFF starting at front
  2094 00:EACF: E8                           INX                     ;Increment X reg twice
  2095 00:EAD0: E8                           INX                     ;points to next character pair
  2096 00:EAD1: C8                           INY                     ;Increment Y reg once for offset to SRBUFF
  2097 00:EAD2: C6 D4                        DEC     TEMP3           ;Decrement character count
  2098 00:EAD4: D0 EB                        BNE     SR_CMPLP        ;Branch back until done
  2099                        ;
  2100                        ;SRBUFF now has the decoded HEX data, which is:
  2101                        ; 1 byte for length, 2 bytes for the load address, up to 16 bytes for data and 1 byte checksum
  2102                        ; Now calculate the checksum and ensure valid S-Record content
  2103 00:EAD6: 64 D8                        STZ     CRCLO           ;Zero Checksum location
  2104 00:EAD8: AE 50 03                     LDX     SRBUFF          ;Load index with record length
  2105 00:EADB: A0 00                        LDY     #$00            ;Zero index
  2106 00:EADD: 18           SR_CHKSM        CLC                     ;Clear carry for add
  2107 00:EADE: B9 50 03                     LDA     SRBUFF,Y        ;Get S-Record byte
  2108 00:EAE1: 65 D8                        ADC     CRCLO           ;Add in checksum Temp
  2109 00:EAE3: 85 D8                        STA     CRCLO           ;Update checksum Temp
  2110 00:EAE5: C8                           INY                     ;Increment offset
  2111 00:EAE6: CA                           DEX                     ;Decrement count
  2112 00:EAE7: D0 F4                        BNE     SR_CHKSM        ;Branch back until done
  2113                        ;
  2114 00:EAE9: A9 FF                        LDA     #$FF            ;Get all bits on
  2115 00:EAEB: 45 D8                        EOR     CRCLO           ;Exclusive OR TEMP for one's complement
  2116 00:EAED: D9 50 03                     CMP     SRBUFF,Y        ;Compare to last byte (which is checksum)
  2117 00:EAF0: D0 C2                        BNE     SREC_ERR        ;If bad, exit out
  2118 00:EAF2: 60                           RTS                     ;Return to caller
  2119                        ;
  2120 00:EAF3: 20 B9 EA     S9_PROC         JSR     SR_PROC         ;Process the S-Record and checksum
  2121 00:EAF6: AD 51 03                     LDA     SRBUFF+1        ;Get MSB load address
  2122 00:EAF9: 85 BF                        STA     COMHI           ;Store to execution pointer
  2123 00:EAFB: AD 52 03                     LDA     SRBUFF+2        ;Get LSB load address
  2124 00:EAFE: 85 BE                        STA     COMLO           ;Store to execution pointer
  2125 00:EB00: 68                           PLA                     ;Pull return address
  2126 00:EB01: 68                           PLA                     ;second byte
  2127 00:EB02: 80 A3                        BRA     INCBLK2         ;Branch back to close out transfer
  2128                        ;
  2129 00:EB04: 20 B9 EA     S1_PROC         JSR     SR_PROC         ;Process the S-Record and checksum
  2130                        ;
  2131                        ;Valid binary S-Record decoded at SRBUFF. Calculate offset from input, add to specified load
  2132                        ; address and store into memory, then loop back until done. Offset is stored in PTR L/H from
  2133                        ; initial input. If no input entered, BUFIDX is zero and PTR L/H is preset to $0800, so checking
  2134                        ; for BUFIDX being zero bypasses adding the offset, if BUFIDX is non zero, then PTR L/H contains
  2135                        ; the offset address which is added to TGT L/H moving the S-Record data to memory.
  2136 00:EB07: AD 51 03                     LDA     SRBUFF+1        ;Get MS load address
  Mon Feb 11 2019 10:21                                                                                                    Page 35


  2137 00:EB0A: 85 CB                        STA     TGTH            ;Store to target pointer
  2138 00:EB0C: AD 52 03                     LDA     SRBUFF+2        ;Get LS load address
  2139 00:EB0F: 85 CA                        STA     TGTL            ;Store to target pointer
  2140 00:EB11: A5 CE                        LDA     BUFIDX          ;Check input count for offset required
  2141 00:EB13: F0 11                        BEQ     NO_OFFSET       ;If Zero, no offset was entered
  2142                        ;
  2143                        ;Add in offset contained at PTR L/H to TGT L/H
  2144 00:EB15: 18                           CLC                     ;Clear carry for add
  2145 00:EB16: A5 DA                        LDA     PTRL            ;Get LS offset
  2146 00:EB18: 65 CA                        ADC     TGTL            ;Add to TGTL address
  2147 00:EB1A: 90 02                        BCC     SKIP_HB         ;Skip increment HB if no carry
  2148 00:EB1C: E6 CB                        INC     TGTH            ;Else increment TGTH by one
  2149 00:EB1E: 85 CA        SKIP_HB         STA     TGTL            ;Save TGTL
  2150 00:EB20: A5 DB                        LDA     PTRH            ;Get MS offset
  2151 00:EB22: 65 CB                        ADC     TGTH            ;Add to TGTH
  2152 00:EB24: 85 CB                        STA     TGTH            ;Save it
  2153                        ;
  2154                        ;Check for first Block and load SRC H/L with load address
  2155 00:EB26: A5 DC        NO_OFFSET       LDA     BLKNO           ;Get Block number
  2156 00:EB28: 3A                           DEC     A               ;Decrement to test for block one
  2157 00:EB29: D0 0E                        BNE     NO_OFFST2       ;If not first block, skip around
  2158 00:EB2B: A5 D0                        LDA     IDX             ;Get running count for first block
  2159 00:EB2D: C9 2C                        CMP     #$2C            ;First S-record?
  2160 00:EB2F: D0 08                        BNE     NO_OFFST2       ;If yes, setup load address pointer
  2161 00:EB31: A5 CA                        LDA     TGTL            ;Get starting address Lo byte
  2162 00:EB33: 85 C8                        STA     SRCL            ;Save it as Source Lo byte
  2163 00:EB35: A5 CB                        LDA     TGTH            ;Get starting address Hi byte
  2164 00:EB37: 85 C9                        STA     SRCH            ;Save it as Source Hi byte
  2165                        ;
  2166 00:EB39: AE 50 03     NO_OFFST2       LDX     SRBUFF          ;Get record length
  2167 00:EB3C: CA                           DEX                     ;Decrement by 3
  2168 00:EB3D: CA                           DEX                     ; to only transfer the data
  2169 00:EB3E: CA                           DEX                     ; and not the count/load address
  2170 00:EB3F: A0 00                        LDY     #$00            ;Zero index
  2171 00:EB41: B9 53 03     MVE_SREC        LDA     SRBUFF+3,Y      ;Get offset to data in record
  2172 00:EB44: 91 CA                        STA     (TGTL),Y        ;Store it to memory
  2173 00:EB46: C8                           INY                     ;Increment index
  2174 00:EB47: CA                           DEX                     ;Decrement record count
  2175 00:EB48: D0 F7                        BNE     MVE_SREC        ;Branch back until done
  2176 00:EB4A: 60                           RTS                     ;Return to caller
  2177                        ;
  2178                        ;[CNTL-R] Reset System command: Resets system by calling Coldstart routine. Page zero is
  2179                        ; cleared, vectors and config data re-initialized from ROM. All I/O devices are reset from
  2180                        ; initial ROM parameters. Monitor cold start is entered.
  2181 00:EB4B: A9 20        SYS_RST         LDA     #$20            ;Get msg "Reset System"
  2182 00:EB4D: 87 D5                        SMB0    CMDFLAG         ;Set bit0 of command flag
  2183 00:EB4F: 80 02                        BRA     RST_ONLY        ;Branch below and handle reset
  2184                        ;
  2185                        ;[CNTL-Z] Zero command: zero RAM from $0100-$7FFF and Reset
  2186 00:EB51: A9 1F        ZERO            LDA     #$1F            ;Get msg "Zero RAM/Reset System"
  2187 00:EB53: 20 54 E8     RST_ONLY        JSR     PROMPT          ;Send to terminal
  2188 00:EB56: 20 34 E2                     JSR     CONTINUE        ;Prompt for Continue
  2189 00:EB59: 8F D5 12                     BBS0    CMDFLAG,DO_COLD ;Branch if reset only
  2190 00:EB5C: 78                           SEI                     ;Disable IRQs
  2191 00:EB5D: A9 01                        LDA     #$01            ;Initialize address pointer to $0100
  2192 00:EB5F: 85 01                        STA     $01             ;Store to pointer high byte
  2193 00:EB61: 64 00                        STZ     $00             ;Zero address low byte
  2194 00:EB63: 3A                           DEC     A               ;LDA #$00
  2195 00:EB64: 92 00        ZEROLOOP        STA     ($00)           ;Write $00 to current address
  2196 00:EB66: E6 00                        INC     $00             ;Increment address pointer
  2197 00:EB68: D0 FA                        BNE     ZEROLOOP        ;Loop back until done
  2198 00:EB6A: E6 01                        INC     $01             ;Increment page
  2199 00:EB6C: 10 F6                        BPL     ZEROLOOP        ;Loop back IF address pointer < $8000
  Mon Feb 11 2019 10:21                                                                                                    Page 36


  2200 00:EB6E: 4C 5D FF     DO_COLD         JMP     B_COLDSTRT      ;Jump to coldstart vector
  2201                        ;
  2202                        ;END OF MONITOR CODE
  2203                        ;**************************************************************************************************
  2204                        ;START OF MONITOR DATA
  2205                        ;**************************************************************************************************
  2206                        ;Monitor command & jump table
  2207                        ; There are two parts to the Monitor command and jump table; First is the list of commands, which
  2208                        ; are one byte each. Alpha command characters are upper case. Second is the 16-bit address table
  2209                        ; that correspond to the command routines for each command character.
  2210 00:EB71: 01           MONCMD  .DB     $01             ;[CNTRL-A] Enter Assembler
  2211 00:EB72: 02                   .DB     $02             ;[CNTRL-B] Enter EhBasic
  2212 00:EB73: 04                   .DB     $04             ;[CNTRL-D] Disassembler
  2213 00:EB74: 05                   .DB     $05             ;[CNTRL-E] Edit EEPROM byte location
  2214 00:EB75: 0C                   .DB     $0C             ;[CNTRL-L] Xmodem/CRC Load
  2215 00:EB76: 10                   .DB     $10             ;[CNTRL-P] Program EEPROM
  2216 00:EB77: 11                   .DB     $11             ;[CNTRL-Q] Query Monitor Commands
  2217 00:EB78: 12                   .DB     $12             ;[CNTRL-R] Reset - same as power up
  2218 00:EB79: 13                   .DB     $13             ;[CNTRL-S] Xmodem/CRC Save
  2219 00:EB7A: 14                   .DB     $14             ;[CNTRL-T] Uptime display since reset
  2220 00:EB7B: 16                   .DB     $16             ;[CNTRL-V] Display Monitor Version
  2221 00:EB7C: 1A                   .DB     $1A             ;[CNTRL-Z] Zero Memory - calls reset
  2222 00:EB7D: 28                   .DB     $28             ;(         Init Macro
  2223 00:EB7E: 29                   .DB     $29             ;)         Run Macro
  2224 00:EB7F: 2C                   .DB     $2C             ;,         Setup Delay parameters
  2225 00:EB80: 2E                   .DB     $2E             ;.         Execute Millisecond Delay
  2226 00:EB81: 2F                   .DB     $2F             ;/         Execute Long Delay
  2227 00:EB82: 5C                   .DB     $5C             ;\         Load and Go Extra Long Delay
  2228 00:EB83: 41                   .DB     $41             ;A         Display/Edit A register
  2229 00:EB84: 42                   .DB     $42             ;B         Benchmark Timer clear/start
  2230 00:EB85: 43                   .DB     $43             ;C         Compare memory block
  2231 00:EB86: 44                   .DB     $44             ;D         Display Memory contents in HEX/TEXT
  2232 00:EB87: 45                   .DB     $45             ;E         Examine/Edit memory
  2233 00:EB88: 46                   .DB     $46             ;F         Fill memory block
  2234 00:EB89: 47                   .DB     $47             ;G         Go execute to <addr>
  2235 00:EB8A: 48                   .DB     $48             ;H         Hex byte string search
  2236 00:EB8B: 49                   .DB     $49             ;I         Input Text string
  2237 00:EB8C: 4D                   .DB     $4D             ;M         Move memory block
  2238 00:EB8D: 50                   .DB     $50             ;P         Display/Edit CPU status reg
  2239 00:EB8E: 51                   .DB     $51             ;Q         Quit Benchmark timer
  2240 00:EB8F: 52                   .DB     $52             ;R         Display Registers
  2241 00:EB90: 53                   .DB     $53             ;S         Display/Edit stack pointer
  2242 00:EB91: 54                   .DB     $54             ;T         Text character string search
  2243 00:EB92: 58                   .DB     $58             ;X         Display/Edit X register
  2244 00:EB93: 59                   .DB     $59             ;Y         Display/Edit Y register
  2245                        ;
  2246 00:EB94: 38 E6        MONTAB  .DW     ASSEMBLE        ;[CNTRL-A] $01 Start Assembler
  2247 00:EB96: 3D E6                .DW     EHBASIC         ;[CNTRL-B] $02 Start EhBasic
  2248 00:EB98: 58 E6                .DW     DSSMBLR         ;[CNTRL-D] $04 Disassembler
  2249 00:EB9A: F3 E7                .DW     EEDIT           ;[CNTRL-E] $05 Edit EEPROM byte location
  2250 00:EB9C: 71 E9                .DW     XMODEML         ;[CNTRL-L] $0C Xmodem Download. Uses Console Port
  2251 00:EB9E: 00 E3                .DW     PROGEE          ;[CNTRL-P] $10 Program the EEPROM
  2252 00:EBA0: 52 E8                .DW     QUERY           ;[CNTRL-Q] $11 Query Monitor Commands
  2253 00:EBA2: 4B EB                .DW     SYS_RST         ;[CNTRL-R] $12 Reset CO2Monitor
  2254 00:EBA4: 98 E8                .DW     XMODEMS         ;[CNTRL-S] $13 Xmodem Upload. Uses Console Port
  2255 00:EBA6: 6F E8                .DW     UPTIME          ;[CNTRL-T] $14 System uptime from Reset
  2256 00:EBA8: 41 E8                .DW     VER             ;[CNTRL-V] $16 Display Monitor Version level
  2257 00:EBAA: 51 EB                .DW     ZERO            ;[CNTRL-Z] $1A Zero memory ($0100-$7FFF) then Reset
  2258 00:EBAC: 72 E2                .DW     INIMACRO        ;(         $28 Clear input buffer/reset pointers
  2259 00:EBAE: 99 E2                .DW     RUNMACRO        ;)         $29 Run Macro from start of input buffer
  2260 00:EBB0: 52 E2                .DW     SET_DELAY       ;.         $2C Setup Delay Parameters
  2261 00:EBB2: 42 FF                .DW     B_EXE_MSDLY     ;,         $2E Perform Millisecond Delay
  2262 00:EBB4: 45 FF                .DW     B_EXE_LGDLY     ;/         $2F Execute Long Delay
  Mon Feb 11 2019 10:21                                                                                                    Page 37


  2263 00:EBB6: 63 E2                .DW     SET_XLDLY       ;\         $5C Load and Go Extra Long Delay
  2264 00:EBB8: 9C E5                .DW     ARG             ;A         $41 Examine/Edit ACCUMULATOR preset/result
  2265 00:EBBA: BA E2                .DW     BENCH           ;B         $42 Clear count and start Benchmark timer
  2266 00:EBBC: F3 E2                .DW     CPMVFL          ;C         $43 Compare command - new
  2267 00:EBBE: F5 E3                .DW     MDUMP           ;D         $44 HEX/TEXT dump from specified memory address
  2268 00:EBC0: 7A E4                .DW     CHANGE          ;E         $45 Examine/change a memory location's contents
  2269 00:EBC2: F3 E2                .DW     CPMVFL          ;F         $46 Fill specified memory range with a value
  2270 00:EBC4: A6 E4                .DW     GO              ;G         $47 Execute program code at specified address
  2271 00:EBC6: FC E4                .DW     SRCHBYT         ;H         $48 Search memory for a specified byte string
  2272 00:EBC8: E5 E5                .DW     TEXT            ;I         $49 Input text string into memory
  2273 00:EBCA: F3 E2                .DW     CPMVFL          ;M         $4D Copy memory from Source to Target space
  2274 00:EBCC: 8C E5                .DW     PRG             ;P         $50 Examine/Edit CPU STATUS REGISTER preset/result
  2275 00:EBCE: C5 E2                .DW     QUITB           ;Q         $51 Quit Benchmark timer and display count
  2276 00:EBD0: B2 E5                .DW     PRSTAT          ;R         $52 Display all preset/result contents
  2277 00:EBD2: 90 E5                .DW     SRG             ;S         $53 Examine/Edit STACK POINTER preset/result
  2278 00:EBD4: D0 E4                .DW     SRCHTXT         ;T         $54 Search memory for a specified text string
  2279 00:EBD6: 98 E5                .DW     XRG             ;X         $58 Examine/Edit X-REGISTER preset/result
  2280 00:EBD8: 94 E5                .DW     YRG             ;Y         $59 Examine/Edit Y-REGISTER preset/result
  2281                        ;
  2282                        ;**************************************************************************************************
  2283                        ;C02Monitor message strings used with PROMPT routine, terminated with $00
  2284 00:EBDA: 20 63 6F 6E  MSG_00  .DB     " cont?"
       00:EBDE: 74 3F 
  2285 00:EBE0: 28 79 2F 6E  MSG_01  .DB     "(y/n)"
       00:EBE4: 29 
  2286 00:EBE5: 00                   .DB     $00
  2287 00:EBE6: 0D 0A        MSG_02  .DB     $0D,$0A
  2288 00:EBE8: 20 20 20             .DB     "   "
  2289 00:EBEB: 20 61 64 64  MSG_03  .DB     " addr:"
       00:EBEF: 72 3A 
  2290 00:EBF1: 00                   .DB     $00
  2291 00:EBF2: 20 6C 65 6E  MSG_04  .DB     " len:"
       00:EBF6: 3A 
  2292 00:EBF7: 00                   .DB     $00
  2293 00:EBF8: 20 76 61 6C  MSG_05  .DB     " val:"
       00:EBFC: 3A 
  2294 00:EBFD: 00                   .DB     $00
  2295 00:EBFE: 20 73 72 63  MSG_06  .DB     " src:"
       00:EC02: 3A 
  2296 00:EC03: 00                   .DB     $00
  2297 00:EC04: 20 74 67 74  MSG_07  .DB     " tgt:"
       00:EC08: 3A 
  2298 00:EC09: 00                   .DB     $00
  2299 00:EC0A: 20 66 69 6E  MSG_08  .DB     " find txt:"
       00:EC0E: 64 20 74 78 
       00:EC12: 74 3A 
  2300 00:EC14: 00                   .DB     $00
  2301 00:EC15: 20 66 69 6E  MSG_09  .DB     " find bin:"
       00:EC19: 64 20 62 69 
       00:EC1D: 6E 3A 
  2302 00:EC1F: 00                   .DB     $00
  2303 00:EC20: 6E 6F 74 20  MSG_0A  .DB     "not "
  2304 00:EC24: 66 6F 75 6E  MSG_0B  .DB     "found"
       00:EC28: 64 
  2305 00:EC29: 00                   .DB     $00
  2306 00:EC2A: 0D 0A        MSG_0C  .DB     $0D,$0A
  2307 00:EC2C: 73 65 61 72          .DB     "search- "
       00:EC30: 63 68 2D 20 
  2308 00:EC34: 00                   .DB     $00
  2309 00:EC35: 0D 0A        MSG_0D  .DB     $0D,$0A
  2310 00:EC37: 28 6E 29 65          .DB     "(n)ext? "
       00:EC3B: 78 74 3F 20 
  2311 00:EC3F: 00                   .DB     $00
  Mon Feb 11 2019 10:21                                                                                                    Page 38


  2312 00:EC40: 53 52 3A 24  MSG_0E  .DB     "SR:$"
  2313 00:EC44: 00                   .DB     $00
  2314 00:EC45: 53 50 3A 24  MSG_0F  .DB     "SP:$"
  2315 00:EC49: 00                   .DB     $00
  2316 00:EC4A: 59 52 3A 24  MSG_10  .DB     "YR:$"
  2317 00:EC4E: 00                   .DB     $00
  2318 00:EC4F: 58 52 3A 24  MSG_11  .DB     "XR:$"
  2319 00:EC53: 00                   .DB     $00
  2320 00:EC54: 41 43 3A 24  MSG_12  .DB     "AC:$"
  2321 00:EC58: 00                   .DB     $00
  2322 00:EC59: 0D 0A        MSG_13  .DB     $0D,$0A
  2323 00:EC5B: 20 20 20 50          .DB      "   PC  AC XR YR SP NV-BDIZC",$0D,$0A
       00:EC5F: 43 20 20 41 
       00:EC63: 43 20 58 52 
       00:EC67: 20 59 52 20 
       00:EC6B: 53 50 20 4E 
       00:EC6F: 56 2D 42 44 
       00:EC73: 49 5A 43 0D 
       00:EC77: 0A 
  2324 00:EC78: 3B 20                .DB     "; "
  2325 00:EC7A: 00                   .DB     $00
  2326 00:EC7B: 0D 0A        MSG_14  .DB     $0D,$0A
  2327 00:EC7D: 43 30 32 4D          .DB     "C02Monitor (c)2013-2019 K.E.Maier",$07
       00:EC81: 6F 6E 69 74 
       00:EC85: 6F 72 20 28 
       00:EC89: 63 29 32 30 
       00:EC8D: 31 33 2D 32 
       00:EC91: 30 31 39 20 
       00:EC95: 4B 2E 45 2E 
       00:EC99: 4D 61 69 65 
       00:EC9D: 72 07 
  2328 00:EC9F: 0D 0A                .DB     $0D,$0A
  2329 00:ECA1: 43 54 52 4C          .DB     "CTRL-Q for command list"
       00:ECA5: 2D 51 20 66 
       00:ECA9: 6F 72 20 63 
       00:ECAD: 6F 6D 6D 61 
       00:ECB1: 6E 64 20 6C 
       00:ECB5: 69 73 74 
  2330 00:ECB8: 0D 0A        MSG_15  .DB     $0D,$0A
  2331 00:ECBA: 56 65 72 73          .DB     "Version 2.02"
       00:ECBE: 69 6F 6E 20 
       00:ECC2: 32 2E 30 32 
  2332 00:ECC6: 0D 0A                .DB     $0D,$0A
  2333 00:ECC8: 33 31 2F 30          .DB     "31/01/2019"
       00:ECCC: 31 2F 32 30 
       00:ECD0: 31 39 
  2334 00:ECD2: 0D 0A                .DB     $0D,$0A
  2335 00:ECD4: 00                   .DB     $00
  2336 00:ECD5: 0D 0A        MSG_16  .DB     $0D,$0A
  2337 00:ECD7: 3B 2D                .DB     ";-"
  2338 00:ECD9: 00                   .DB     $00
  2339 00:ECDA: 20 64 65 6C  MSG_17  .DB     " delay ms:"
       00:ECDE: 61 79 20 6D 
       00:ECE2: 73 3A 
  2340 00:ECE4: 00                   .DB     $00
  2341 00:ECE5: 20 6D 75 6C  MSG_18  .DB     " mult:"
       00:ECE9: 74 3A 
  2342 00:ECEB: 00                   .DB     $00
  2343 00:ECEC: 20 64 65 6C  MSG_19  .DB     " delay xl:"
       00:ECF0: 61 79 20 78 
       00:ECF4: 6C 3A 
  2344 00:ECF6: 00                   .DB     $00
  2345 00:ECF7: 55 70 74 69  MSG_1A  .DB     "Uptime: "
  Mon Feb 11 2019 10:21                                                                                                    Page 39


       00:ECFB: 6D 65 3A 20 
  2346 00:ECFF: 00                   .DB     $00
  2347 00:ED00: 20 44 61 79  MSG_1B  .DB     " Days, "
       00:ED04: 73 2C 20 
  2348 00:ED07: 00                   .DB     $00
  2349 00:ED08: 20 48 6F 75  MSG_1C  .DB     " Hours, "
       00:ED0C: 72 73 2C 20 
  2350 00:ED10: 00                   .DB     $00
  2351 00:ED11: 20 4D 69 6E  MSG_1D  .DB     " Minutes, "
       00:ED15: 75 74 65 73 
       00:ED19: 2C 20 
  2352 00:ED1B: 00                   .DB     $00
  2353 00:ED1C: 20 53 65 63  MSG_1E  .DB     " Seconds"
       00:ED20: 6F 6E 64 73 
  2354 00:ED24: 00                   .DB     $00
  2355 00:ED25: 5A 65 72 6F  MSG_1F  .DB     "Zero RAM/"
       00:ED29: 20 52 41 4D 
       00:ED2D: 2F 
  2356 00:ED2E: 52 65 73 65  MSG_20  .DB     "Reset,"
       00:ED32: 74 2C 
  2357 00:ED34: 00                   .DB     $00
  2358 00:ED35: 50 72 6F 67  MSG_21  .DB     "Program EEPROM",$0D,$0A
       00:ED39: 72 61 6D 20 
       00:ED3D: 45 45 50 52 
       00:ED41: 4F 4D 0D 0A 
  2359 00:ED45: 00                   .DB     $00
  2360 00:ED46: 0D 0A        MSG_22  .DB     $0D,$0A
  2361 00:ED48: 41 72 65 20          .DB     "Are you sure? "
       00:ED4C: 79 6F 75 20 
       00:ED50: 73 75 72 65 
       00:ED54: 3F 20 
  2362 00:ED56: 00                   .DB     $00
  2363 00:ED57: 0D 0A        MSG_23  .DB     $0D,$0A
  2364 00:ED59: 57 72 69 74          .DB     "Writing EEPROM..."
       00:ED5D: 69 6E 67 20 
       00:ED61: 45 45 50 52 
       00:ED65: 4F 4D 2E 2E 
       00:ED69: 2E 
  2365 00:ED6A: 00                   .DB     $00
  2366 00:ED6B: 0D 0A        MSG_24  .DB     $0D,$0A
  2367 00:ED6D: 45 45 50 52          .DB     "EEPROM write complete!"
       00:ED71: 4F 4D 20 77 
       00:ED75: 72 69 74 65 
       00:ED79: 20 63 6F 6D 
       00:ED7D: 70 6C 65 74 
       00:ED81: 65 21 
  2368 00:ED83: 00                   .DB     $00
  2369 00:ED84: 0D 0A        MSG_25  .DB     $0D,$0A
  2370 00:ED86: 45 45 50 52          .DB     "EEPROM write failed!",$0D,$0A
       00:ED8A: 4F 4D 20 77 
       00:ED8E: 72 69 74 65 
       00:ED92: 20 66 61 69 
       00:ED96: 6C 65 64 21 
       00:ED9A: 0D 0A 
  2371 00:ED9C: 48 61 72 64          .DB     "Hardware or EEPROM jumper!"
       00:EDA0: 77 61 72 65 
       00:EDA4: 20 6F 72 20 
       00:EDA8: 45 45 50 52 
       00:EDAC: 4F 4D 20 6A 
       00:EDB0: 75 6D 70 65 
       00:EDB4: 72 21 
  2372 00:EDB6: 00                   .DB     $00
  2373 00:EDB7: 0D 0A        MSG_26  .DB     $0D,$0A
  Mon Feb 11 2019 10:21                                                                                                    Page 40


  2374 00:EDB9: 53 68 6F 77          .DB     "Show Loop count "
       00:EDBD: 20 4C 6F 6F 
       00:EDC1: 70 20 63 6F 
       00:EDC5: 75 6E 74 20 
  2375 00:EDC9: 00                   .DB     $00
  2376 00:EDCA: 0D 0A        MSG_27  .DB     $0D,$0A
  2377 00:EDCC: 4C 6F 6F 70          .DB     "Loops: "
       00:EDD0: 73 3A 20 
  2378 00:EDD3: 00                   .DB     $00
  2379 00:EDD4: 58 4D 4F 44  MSG_28  .DB     "XMODEM Download, <Esc> to abort, or"
       00:EDD8: 45 4D 20 44 
       00:EDDC: 6F 77 6E 6C 
       00:EDE0: 6F 61 64 2C 
       00:EDE4: 20 3C 45 73 
       00:EDE8: 63 3E 20 74 
       00:EDEC: 6F 20 61 62 
       00:EDF0: 6F 72 74 2C 
       00:EDF4: 20 6F 72 
  2380 00:EDF7: 0D 0A                .DB     $0D,$0A
  2381 00:EDF9: 4C 6F 61 64          .DB     "Load Address/S-Record offset:"
       00:EDFD: 20 41 64 64 
       00:EE01: 72 65 73 73 
       00:EE05: 2F 53 2D 52 
       00:EE09: 65 63 6F 72 
       00:EE0D: 64 20 6F 66 
       00:EE11: 66 73 65 74 
       00:EE15: 3A 
  2382 00:EE16: 00                   .DB     $00
  2383 00:EE17: 0D 0A        MSG_29  .DB     $0D,$0A
  2384 00:EE19: 58 6D 6F 64          .DB     "Xmodem Upload, <ESC> to abort, or"
       00:EE1D: 65 6D 20 55 
       00:EE21: 70 6C 6F 61 
       00:EE25: 64 2C 20 3C 
       00:EE29: 45 53 43 3E 
       00:EE2D: 20 74 6F 20 
       00:EE31: 61 62 6F 72 
       00:EE35: 74 2C 20 6F 
       00:EE39: 72 
  2385 00:EE3A: 0D 0A                .DB     $0D,$0A
  2386 00:EE3C: 45 6E 74 65          .DB     "Enter Start address:"
       00:EE40: 72 20 53 74 
       00:EE44: 61 72 74 20 
       00:EE48: 61 64 64 72 
       00:EE4C: 65 73 73 3A 
  2387 00:EE50: 00                   .DB     $00
  2388 00:EE51: 0D 0A        MSG_2A  .DB     $0D,$0A
  2389 00:EE53: 53 65 74 75          .DB     "Setup Terminal program for Data transfer"
       00:EE57: 70 20 54 65 
       00:EE5B: 72 6D 69 6E 
       00:EE5F: 61 6C 20 70 
       00:EE63: 72 6F 67 72 
       00:EE67: 61 6D 20 66 
       00:EE6B: 6F 72 20 44 
       00:EE6F: 61 74 61 20 
       00:EE73: 74 72 61 6E 
       00:EE77: 73 66 65 72 
  2390 00:EE7B: 0D 0A                .DB     $0D,$0A
  2391 00:EE7D: 00                   .DB     $00
  2392 00:EE7E: 0D 0A        MSG_2B  .DB     $0D,$0A
  2393 00:EE80: 44 61 74 61          .DB     "Data transfer complete!",$0A
       00:EE84: 20 74 72 61 
       00:EE88: 6E 73 66 65 
       00:EE8C: 72 20 63 6F 
  Mon Feb 11 2019 10:21                                                                                                    Page 41


       00:EE90: 6D 70 6C 65 
       00:EE94: 74 65 21 0A 
  2394 00:EE98: 00                   .DB     $00
  2395 00:EE99: 0D 0A        MSG_2C  .DB     $0D,$0A
  2396 00:EE9B: 44 61 74 61          .DB     "Data transfer error!",$0A
       00:EE9F: 20 74 72 61 
       00:EEA3: 6E 73 66 65 
       00:EEA7: 72 20 65 72 
       00:EEAB: 72 6F 72 21 
       00:EEAF: 0A 
  2397 00:EEB0: 00                   .DB     $00
  2398 00:EEB1: 0D 0A        MSG_2D  .DB     $0D,$0A
  2399 00:EEB3: 53 2D 52 65          .DB     "S-Record load at:$"
       00:EEB7: 63 6F 72 64 
       00:EEBB: 20 6C 6F 61 
       00:EEBF: 64 20 61 74 
       00:EEC3: 3A 24 
  2400 00:EEC5: 00                   .DB     $00
  2401 00:EEC6: 0D 0A        MSG_2E  .DB     $0D,$0A
  2402 00:EEC8: 44 69 73 61          .DB     "Disassembly from:"
       00:EECC: 73 73 65 6D 
       00:EED0: 62 6C 79 20 
       00:EED4: 66 72 6F 6D 
       00:EED8: 3A 
  2403 00:EED9: 00                   .DB     $00
  2404 00:EEDA: 53 74 61 72  MSG_2F  .DB     "Start Benchmark counter?"
       00:EEDE: 74 20 42 65 
       00:EEE2: 6E 63 68 6D 
       00:EEE6: 61 72 6B 20 
       00:EEEA: 63 6F 75 6E 
       00:EEEE: 74 65 72 3F 
  2405 00:EEF2: 00                   .DB     $00
  2406 00:EEF3: 20 53 65 63  MSG_30  .DB     " Seconds"
       00:EEF7: 6F 6E 64 73 
  2407 00:EEFB: 0D 0A                .DB     $0D, $0A
  2408 00:EEFD: 00                   .DB     $00
  2409 00:EEFE: 45 64 69 74  MSG_31  .DB     "Edit EEPROM data, be careful!"
       00:EF02: 20 45 45 50 
       00:EF06: 52 4F 4D 20 
       00:EF0A: 64 61 74 61 
       00:EF0E: 2C 20 62 65 
       00:EF12: 20 63 61 72 
       00:EF16: 65 66 75 6C 
       00:EF1A: 21 
  2410 00:EF1B: 00                   .DB     $00
  2411 00:EF1C: 0D 0A        MSG_32  .DB     $0D,$0A
  2412 00:EF1E: 41 64 64 72          .DB     "Address not in EEPROM!"
       00:EF22: 65 73 73 20 
       00:EF26: 6E 6F 74 20 
       00:EF2A: 69 6E 20 45 
       00:EF2E: 45 50 52 4F 
       00:EF32: 4D 21 
  2413 00:EF34: 0D 0A                .DB     $0D,$0A
  2414 00:EF36: 00                   .DB     $00
  2415 00:EF37: 0D 0A        MSG_33  .DB     $0D,$0A
  2416 00:EF39: 41 64 64 72          .DB     "Address not in RAM!"
       00:EF3D: 65 73 73 20 
       00:EF41: 6E 6F 74 20 
       00:EF45: 69 6E 20 52 
       00:EF49: 41 4D 21 
  2417 00:EF4C: 0D 0A                .DB     $0D,$0A
  2418 00:EF4E: 00                   .DB     $00
  2419 00:EF4F: 0D 0A        MSG_34  .DB     $0D,$0A
  Mon Feb 11 2019 10:21                                                                                                    Page 42


  2420 00:EF51: 41 73 73 65          .DB     "Assembler not yet implemented!"
       00:EF55: 6D 62 6C 65 
       00:EF59: 72 20 6E 6F 
       00:EF5D: 74 20 79 65 
       00:EF61: 74 20 69 6D 
       00:EF65: 70 6C 65 6D 
       00:EF69: 65 6E 74 65 
       00:EF6D: 64 21 
  2421 00:EF6F: 00                   .DB     $00
  2422 00:EF70: 0D 0A 0A     MSG_35  .DB     $0D,$0A,$0A
  2423 00:EF73: 4D 65 6D 6F          .DB     "Memory Ops: "
       00:EF77: 72 79 20 4F 
       00:EF7B: 70 73 3A 20 
  2424 00:EF7F: 5B 43 5D 6F          .DB     "[C]ompare, "
       00:EF83: 6D 70 61 72 
       00:EF87: 65 2C 20 
  2425 00:EF8A: 5B 44 5D 69          .DB     "[D]isplay, "
       00:EF8E: 73 70 6C 61 
       00:EF92: 79 2C 20 
  2426 00:EF95: 5B 45 5D 64          .DB     "[E]dit, "
       00:EF99: 69 74 2C 20 
  2427 00:EF9D: 5B 46 5D 69          .DB     "[F]ill, "
       00:EFA1: 6C 6C 2C 20 
  2428 00:EFA5: 5B 47 5D 6F          .DB     "[G]o Exec,",$0D,$0A
       00:EFA9: 20 45 78 65 
       00:EFAD: 63 2C 0D 0A 
  2429 00:EFB1: 5B 48 5D 65          .DB     "[H]ex Find, "
       00:EFB5: 78 20 46 69 
       00:EFB9: 6E 64 2C 20 
  2430 00:EFBD: 5B 49 5D 6E          .DB     "[I]nput Text, "
       00:EFC1: 70 75 74 20 
       00:EFC5: 54 65 78 74 
       00:EFC9: 2C 20 
  2431 00:EFCB: 5B 4D 5D 6F          .DB     "[M]ove, "
       00:EFCF: 76 65 2C 20 
  2432 00:EFD3: 5B 54 5D 65          .DB     "[T]ext Find",$0D,$0A,$0A
       00:EFD7: 78 74 20 46 
       00:EFDB: 69 6E 64 0D 
       00:EFDF: 0A 0A 
  2433 00:EFE1: 52 65 67 69          .DB     "Register Ops: "
       00:EFE5: 73 74 65 72 
       00:EFE9: 20 4F 70 73 
       00:EFED: 3A 20 
  2434 00:EFEF: 52 2C 41 2C          .DB     "R,A,X,Y,S,P",$0D,$0A,$0A
       00:EFF3: 58 2C 59 2C 
       00:EFF7: 53 2C 50 0D 
       00:EFFB: 0A 0A 
  2435 00:EFFD: 43 6F 75 6E          .DB     "Counter/Timer Ops: "
       00:F001: 74 65 72 2F 
       00:F005: 54 69 6D 65 
       00:F009: 72 20 4F 70 
       00:F00D: 73 3A 20 
  2436 00:F010: 2C 3D 20 73          .DB     ",= set ms|mult, "
       00:F014: 65 74 20 6D 
       00:F018: 73 7C 6D 75 
       00:F01C: 6C 74 2C 20 
  2437 00:F020: 2E 3D 20 65          .DB     ".= exe ms, "
       00:F024: 78 65 20 6D 
       00:F028: 73 2C 20 
  2438 00:F02B: 2F 3D 20 65          .DB     "/= exe ms*mult, "
       00:F02F: 78 65 20 6D 
       00:F033: 73 2A 6D 75 
       00:F037: 6C 74 2C 20 
  Mon Feb 11 2019 10:21                                                                                                    Page 43


  2439 00:F03B: 5C 3D 20 65          .DB     "\= exe (?)*ms*mult",$0D,$0A
       00:F03F: 78 65 20 28 
       00:F043: 3F 29 2A 6D 
       00:F047: 73 2A 6D 75 
       00:F04B: 6C 74 0D 0A 
  2440 00:F04F: 5B 42 5D 65          .DB     "[B]enchmark clear/start, "
       00:F053: 6E 63 68 6D 
       00:F057: 61 72 6B 20 
       00:F05B: 63 6C 65 61 
       00:F05F: 72 2F 73 74 
       00:F063: 61 72 74 2C 
       00:F067: 20 
  2441 00:F068: 5B 51 5D 75          .DB     "[Q]uit benchmark/display elapsed time",$0D,$0A,$0A
       00:F06C: 69 74 20 62 
       00:F070: 65 6E 63 68 
       00:F074: 6D 61 72 6B 
       00:F078: 2F 64 69 73 
       00:F07C: 70 6C 61 79 
       00:F080: 20 65 6C 61 
       00:F084: 70 73 65 64 
       00:F088: 20 74 69 6D 
       00:F08C: 65 0D 0A 0A 
  2442 00:F090: 4D 61 63 72          .DB     "Macro: "
       00:F094: 6F 3A 20 
  2443 00:F097: 28 3D 20 49          .DB     "(= Init "
       00:F09B: 6E 69 74 20 
  2444 00:F09F: 29 3D 20 52          .DB     ")= Run",$0D,$0A,$0A
       00:F0A3: 75 6E 0D 0A 
       00:F0A7: 0A 
  2445 00:F0A8: 43 54 52 4C          .DB     "CTRL[?]: "
       00:F0AC: 5B 3F 5D 3A 
       00:F0B0: 20 
  2446 00:F0B1: 5B 41 5D 73          .DB     "[A]ssemble, "
       00:F0B5: 73 65 6D 62 
       00:F0B9: 6C 65 2C 20 
  2447 00:F0BD: 5B 42 5D 61          .DB     "[B]asic, "
       00:F0C1: 73 69 63 2C 
       00:F0C5: 20 
  2448 00:F0C6: 5B 44 5D 69          .DB     "[D]isassemble, "
       00:F0CA: 73 61 73 73 
       00:F0CE: 65 6D 62 6C 
       00:F0D2: 65 2C 20 
  2449 00:F0D5: 5B 45 5D 64          .DB     "[E]dit EEPROM, "
       00:F0D9: 69 74 20 45 
       00:F0DD: 45 50 52 4F 
       00:F0E1: 4D 2C 20 
  2450 00:F0E4: 5B 4C 5D 6F          .DB     "[L]oad, "
       00:F0E8: 61 64 2C 20 
  2451 00:F0EC: 5B 50 5D 72          .DB     "[P]rogram,",$0D,$0A
       00:F0F0: 6F 67 72 61 
       00:F0F4: 6D 2C 0D 0A 
  2452 00:F0F8: 5B 51 5D 75          .DB     "[Q]uery Cmds ,"
       00:F0FC: 65 72 79 20 
       00:F100: 43 6D 64 73 
       00:F104: 20 2C 
  2453 00:F106: 5B 52 5D 65          .DB     "[R]eset, "
       00:F10A: 73 65 74 2C 
       00:F10E: 20 
  2454 00:F10F: 5B 53 5D 61          .DB     "[S]ave, "
       00:F113: 76 65 2C 20 
  2455 00:F117: 5B 54 5D 69          .DB     "[T]ime up, "
       00:F11B: 6D 65 20 75 
       00:F11F: 70 2C 20 
  Mon Feb 11 2019 10:21                                                                                                    Page 44


  2456 00:F122: 5B 56 5D 65          .DB     "[V]ersion, "
       00:F126: 72 73 69 6F 
       00:F12A: 6E 2C 20 
  2457 00:F12D: 5B 5A 5D 65          .DB     "[Z]ero RAM/Reset",$0A
       00:F131: 72 6F 20 52 
       00:F135: 41 4D 2F 52 
       00:F139: 65 73 65 74 
       00:F13D: 0A 
  2458 00:F13E: 00                   .DB     $00
  2459 00:F13F: 0D 0A        MSG_36  .DB     $0D,$0A
  2460 00:F141: 36 35 43 30          .DB     "65C02 Enhanced BASIC Version 2.22p4C"
       00:F145: 32 20 45 6E 
       00:F149: 68 61 6E 63 
       00:F14D: 65 64 20 42 
       00:F151: 41 53 49 43 
       00:F155: 20 56 65 72 
       00:F159: 73 69 6F 6E 
       00:F15D: 20 32 2E 32 
       00:F161: 32 70 34 43 
  2461 00:F165: 0D 0A                .DB     $0D,$0A
  2462 00:F167: 20 5B 43 5D          .DB     " [C]old/[W]arm start?"
       00:F16B: 6F 6C 64 2F 
       00:F16F: 5B 57 5D 61 
       00:F173: 72 6D 20 73 
       00:F177: 74 61 72 74 
       00:F17B: 3F 
  2463 00:F17C: 00                   .DB     $00
  2464                        MSG_TABLE       ;Message table: contains message addresses sent via the PROMPT routine
  2465 00:F17D: DA EB E0 EB          .DW     MSG_00, MSG_01, MSG_02, MSG_03, MSG_04, MSG_05, MSG_06, MSG_07
       00:F181: E6 EB EB EB 
       00:F185: F2 EB F8 EB 
       00:F189: FE EB 04 EC 
  2466 00:F18D: 0A EC 15 EC          .DW     MSG_08, MSG_09, MSG_0A, MSG_0B, MSG_0C, MSG_0D, MSG_0E, MSG_0F
       00:F191: 20 EC 24 EC 
       00:F195: 2A EC 35 EC 
       00:F199: 40 EC 45 EC 
  2467 00:F19D: 4A EC 4F EC          .DW     MSG_10, MSG_11, MSG_12, MSG_13, MSG_14, MSG_15, MSG_16, MSG_17
       00:F1A1: 54 EC 59 EC 
       00:F1A5: 7B EC B8 EC 
       00:F1A9: D5 EC DA EC 
  2468 00:F1AD: E5 EC EC EC          .DW     MSG_18, MSG_19, MSG_1A, MSG_1B, MSG_1C, MSG_1D, MSG_1E, MSG_1F
       00:F1B1: F7 EC 00 ED 
       00:F1B5: 08 ED 11 ED 
       00:F1B9: 1C ED 25 ED 
  2469 00:F1BD: 2E ED 35 ED          .DW     MSG_20, MSG_21, MSG_22, MSG_23, MSG_24, MSG_25, MSG_26, MSG_27
       00:F1C1: 46 ED 57 ED 
       00:F1C5: 6B ED 84 ED 
       00:F1C9: B7 ED CA ED 
  2470 00:F1CD: D4 ED 17 EE          .DW     MSG_28, MSG_29, MSG_2A, MSG_2B, MSG_2C, MSG_2D, MSG_2E, MSG_2F
       00:F1D1: 51 EE 7E EE 
       00:F1D5: 99 EE B1 EE 
       00:F1D9: C6 EE DA EE 
  2471 00:F1DD: F3 EE FE EE          .DW     MSG_30, MSG_31, MSG_32, MSG_33, MSG_34, MSG_35, MSG_36
       00:F1E1: 1C EF 37 EF 
       00:F1E5: 4F EF 70 EF 
       00:F1E9: 3F F1 
  2472                        ;
  2473                        ;**************************************************************************************************
  2474                        ;START OF DISASSEMBLER DATA
  2475                        ; Pointer for address mode handlers. Each byte contains handler pointer for two opcodes;
  2476                        ; Upper nibble for odd, lower nibble for even
  2477                        HDLR_IDX
  2478 00:F1EB: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$10,$88,$8F
  Mon Feb 11 2019 10:21                                                                                                    Page 45


       00:F1EF: 02 10 88 8F 
  2479 00:F1F3: C7 B0 34 4E          .DB     $C7,$B0,$34,$4E,$0A,$10,$89,$9F
       00:F1F7: 0A 10 89 9F 
  2480 00:F1FB: 86 00 33 3E          .DB     $86,$00,$33,$3E,$02,$10,$88,$8F
       00:F1FF: 02 10 88 8F 
  2481 00:F203: C7 B0 44 4E          .DB     $C7,$B0,$44,$4E,$0A,$10,$99,$9F
       00:F207: 0A 10 99 9F 
  2482 00:F20B: 06 00 03 3E          .DB     $06,$00,$03,$3E,$02,$10,$88,$8F
       00:F20F: 02 10 88 8F 
  2483 00:F213: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F217: 0A 00 09 9F 
  2484 00:F21B: 06 00 33 3E          .DB     $06,$00,$33,$3E,$02,$10,$B8,$8F
       00:F21F: 02 10 B8 8F 
  2485 00:F223: C7 B0 44 4E          .DB     $C7,$B0,$44,$4E,$0A,$00,$D9,$9F
       00:F227: 0A 00 D9 9F 
  2486 00:F22B: C6 00 33 3E          .DB     $C6,$00,$33,$3E,$02,$00,$88,$8F
       00:F22F: 02 00 88 8F 
  2487 00:F233: C7 B0 44 5E          .DB     $C7,$B0,$44,$5E,$0A,$00,$89,$9F
       00:F237: 0A 00 89 9F 
  2488 00:F23B: 26 20 33 3E          .DB     $26,$20,$33,$3E,$02,$00,$88,$8F
       00:F23F: 02 00 88 8F 
  2489 00:F243: C7 B0 44 5E          .DB     $C7,$B0,$44,$5E,$0A,$00,$99,$AF
       00:F247: 0A 00 99 AF 
  2490 00:F24B: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$00,$88,$8F
       00:F24F: 02 00 88 8F 
  2491 00:F253: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F257: 0A 00 09 9F 
  2492 00:F25B: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$00,$88,$8F
       00:F25F: 02 00 88 8F 
  2493 00:F263: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F267: 0A 00 09 9F 
  2494                        ;
  2495                        ;Disassembler handler table: Handler address index: (referenced in table HDLR_IDX)
  2496                        HDLR_TAB
  2497 00:F26B: BD E6                .DW     IMPLIED         ;$00
  2498 00:F26D: 04 E7                .DW     ACC_MODE        ;$01
  2499 00:F26F: FA E6                .DW     ZP_IMED         ;$02
  2500 00:F271: 1C E7                .DW     ZP_ABS          ;$03
  2501 00:F273: 44 E7                .DW     ZP_ABS_X        ;$04
  2502 00:F275: 50 E7                .DW     ZP_ABS_Y        ;$05
  2503 00:F277: 69 E7                .DW     ZP_IND_X        ;$06
  2504 00:F279: 71 E7                .DW     ZP_IND_Y        ;$07
  2505 00:F27B: 0C E7                .DW     ABSOLUTE        ;$08
  2506 00:F27D: 5E E7                .DW     ABS_X           ;$09
  2507 00:F27F: 5C E7                .DW     ABS_Y           ;$0A
  2508 00:F281: 24 E7                .DW     INDIRECT        ;$0B
  2509 00:F283: B0 E7                .DW     REL_BRA         ;$0C
  2510 00:F285: 79 E7                .DW     IND_ABS_X       ;$0D
  2511 00:F287: 87 E7                .DW     ZP_XMB          ;$0E
  2512 00:F289: 9B E7                .DW     ZP_BBX          ;$0F
  2513                        ;
  2514                        ;Disassembler mnemonic pointer table. This is indexed by the instruction opcode.
  2515                        ; The values in this table are an index to the mnemonic data used to print: 
  2516                        MNE_PTAB        ;Mnemonic pointer index table
  2517 00:F28B: 1C 4C 00 00          .DB     $1C,$4C,$00,$00,$82,$4C,$06,$5E,$50,$4C,$06,$00,$82,$4C,$06,$08
       00:F28F: 82 4C 06 5E 
       00:F293: 50 4C 06 00 
       00:F297: 82 4C 06 08 
  2518 00:F29B: 18 4C 4C 00          .DB     $18,$4C,$4C,$00,$80,$4C,$06,$5E,$22,$4C,$38,$00,$80,$4C,$06,$08
       00:F29F: 80 4C 06 5E 
       00:F2A3: 22 4C 38 00 
       00:F2A7: 80 4C 06 08 
  2519 00:F2AB: 40 04 00 00          .DB     $40,$04,$00,$00,$12,$04,$60,$5E,$58,$04,$60,$00,$12,$04,$60,$08
  Mon Feb 11 2019 10:21                                                                                                    Page 46


       00:F2AF: 12 04 60 5E 
       00:F2B3: 58 04 60 00 
       00:F2B7: 12 04 60 08 
  2520 00:F2BB: 14 04 04 00          .DB     $14,$04,$04,$00,$12,$04,$60,$5E,$6A,$04,$30,$00,$12,$04,$60,$08
       00:F2BF: 12 04 60 5E 
       00:F2C3: 6A 04 30 00 
       00:F2C7: 12 04 60 08 
  2521 00:F2CB: 64 36 00 00          .DB     $64,$36,$00,$00,$00,$36,$48,$5E,$4E,$36,$48,$00,$3E,$36,$48,$08
       00:F2CF: 00 36 48 5E 
       00:F2D3: 4E 36 48 00 
       00:F2D7: 3E 36 48 08 
  2522 00:F2DB: 1E 36 36 00          .DB     $1E,$36,$36,$00,$00,$36,$48,$5E,$26,$36,$54,$00,$00,$36,$48,$08
       00:F2DF: 00 36 48 5E 
       00:F2E3: 26 36 54 00 
       00:F2E7: 00 36 48 08 
  2523 00:F2EB: 66 02 00 00          .DB     $66,$02,$00,$00,$7A,$02,$62,$5E,$56,$02,$62,$00,$3E,$02,$62,$08
       00:F2EF: 7A 02 62 5E 
       00:F2F3: 56 02 62 00 
       00:F2F7: 3E 02 62 08 
  2524 00:F2FB: 20 02 02 00          .DB     $20,$02,$02,$00,$7A,$02,$62,$5E,$6E,$02,$5C,$00,$3E,$02,$62,$08
       00:F2FF: 7A 02 62 5E 
       00:F303: 6E 02 5C 00 
       00:F307: 3E 02 62 08 
  2525 00:F30B: 1A 72 00 00          .DB     $1A,$72,$00,$00,$78,$72,$76,$70,$34,$12,$86,$00,$78,$72,$76,$0A
       00:F30F: 78 72 76 70 
       00:F313: 34 12 86 00 
       00:F317: 78 72 76 0A 
  2526 00:F31B: 0C 72 72 00          .DB     $0C,$72,$72,$00,$78,$72,$76,$70,$8A,$72,$88,$00,$7A,$72,$7A,$0A
       00:F31F: 78 72 76 70 
       00:F323: 8A 72 88 00 
       00:F327: 7A 72 7A 0A 
  2527 00:F32B: 46 42 44 00          .DB     $46,$42,$44,$00,$46,$42,$44,$70,$7E,$42,$7C,$00,$46,$42,$44,$0A
       00:F32F: 46 42 44 70 
       00:F333: 7E 42 7C 00 
       00:F337: 46 42 44 0A 
  2528 00:F33B: 0E 42 42 00          .DB     $0E,$42,$42,$00,$46,$42,$44,$70,$28,$42,$84,$00,$46,$42,$44,$0A
       00:F33F: 46 42 44 70 
       00:F343: 28 42 84 00 
       00:F347: 46 42 44 0A 
  2529 00:F34B: 2E 2A 00 00          .DB     $2E,$2A,$00,$00,$2E,$2A,$30,$70,$3C,$2A,$32,$8C,$2E,$2A,$30,$0A
       00:F34F: 2E 2A 30 70 
       00:F353: 3C 2A 32 8C 
       00:F357: 2E 2A 30 0A 
  2530 00:F35B: 16 2A 2A 00          .DB     $16,$2A,$2A,$00,$00,$2A,$30,$70,$24,$2A,$52,$74,$00,$2A,$30,$0A
       00:F35F: 00 2A 30 70 
       00:F363: 24 2A 52 74 
       00:F367: 00 2A 30 0A 
  2531 00:F36B: 2C 68 00 00          .DB     $2C,$68,$00,$00,$2C,$68,$38,$70,$3A,$68,$4A,$00,$2C,$68,$38,$0A
       00:F36F: 2C 68 38 70 
       00:F373: 3A 68 4A 00 
       00:F377: 2C 68 38 0A 
  2532 00:F37B: 10 68 68 00          .DB     $10,$68,$68,$00,$00,$68,$38,$70,$6C,$68,$5A,$00,$00,$68,$38,$0A
       00:F37F: 00 68 38 70 
       00:F383: 6C 68 5A 00 
       00:F387: 00 68 38 0A 
  2533                        ;
  2534                        DIS_NMEM        ;Mnemonic compressed table
  2535                        ; Uses two bytes per 3-character Mnemonic. 5-bits per character uses 15-bit total
  2536                        ; Characters are left to right. 5-bits shifted into A reg, add in $3F and print
  2537                        ; "?" starts with "00000", "A" starts with "00010", "B" starts with "00011", etc.
  2538                        ;
  2539                        ; A-00010 B-00011 C-00100 D-00101 E-00110 F-00111 G-01000 H-01001 I-01010
  2540                        ; J-01011 K-01100 L-01101 M-01110 N-01111 O-10000 P-10001 Q-10010 R-10011
  Mon Feb 11 2019 10:21                                                                                                    Page 47


  2541                        ; S-10100 T-10101 U-10110 V-10111 W-11000 X-11001 Y-11010 Z-11011
  2542 00:F38B: 00 00                .DBYTE  %0000000000000000       ;???    $00
  2543 00:F38D: 11 48                .DBYTE  %0001000101001000       ;ADC    $02
  2544 00:F38F: 13 CA                .DBYTE  %0001001111001010       ;AND    $04
  2545 00:F391: 15 1A                .DBYTE  %0001010100011010       ;ASL    $06
  2546 00:F393: 18 E6                .DBYTE  %0001100011100110       ;BBR    $08
  2547 00:F395: 18 E8                .DBYTE  %0001100011101000       ;BBS    $0A
  2548 00:F397: 19 08                .DBYTE  %0001100100001000       ;BCC    $0C
  2549 00:F399: 19 28                .DBYTE  %0001100100101000       ;BCS    $0E
  2550 00:F39B: 19 A4                .DBYTE  %0001100110100100       ;BEQ    $10
  2551 00:F39D: 1A AA                .DBYTE  %0001101010101010       ;BIT    $12
  2552 00:F39F: 1B 94                .DBYTE  %0001101110010100       ;BMI    $14
  2553 00:F3A1: 1B CC                .DBYTE  %0001101111001100       ;BNE    $16
  2554 00:F3A3: 1C 5A                .DBYTE  %0001110001011010       ;BPL    $18
  2555 00:F3A5: 1C C4                .DBYTE  %0001110011000100       ;BRA    $1A
  2556 00:F3A7: 1C D8                .DBYTE  %0001110011011000       ;BRK    $1C
  2557 00:F3A9: 1D C8                .DBYTE  %0001110111001000       ;BVC    $1E
  2558 00:F3AB: 1D E8                .DBYTE  %0001110111101000       ;BVS    $20
  2559 00:F3AD: 23 48                .DBYTE  %0010001101001000       ;CLC    $22
  2560 00:F3AF: 23 4A                .DBYTE  %0010001101001010       ;CLD    $24
  2561 00:F3B1: 23 54                .DBYTE  %0010001101010100       ;CLI    $26
  2562 00:F3B3: 23 6E                .DBYTE  %0010001101101110       ;CLV    $28
  2563 00:F3B5: 23 A2                .DBYTE  %0010001110100010       ;CMP    $2A
  2564 00:F3B7: 24 72                .DBYTE  %0010010001110010       ;CPX    $2C
  2565 00:F3B9: 24 74                .DBYTE  %0010010001110100       ;CPY    $2E
  2566 00:F3BB: 29 88                .DBYTE  %0010100110001000       ;DEC    $30
  2567 00:F3BD: 29 B2                .DBYTE  %0010100110110010       ;DEX    $32
  2568 00:F3BF: 29 B4                .DBYTE  %0010100110110100       ;DEY    $34
  2569 00:F3C1: 34 26                .DBYTE  %0011010000100110       ;EOR    $36
  2570 00:F3C3: 53 C8                .DBYTE  %0101001111001000       ;INC    $38
  2571 00:F3C5: 53 F2                .DBYTE  %0101001111110010       ;INX    $3A
  2572 00:F3C7: 53 F4                .DBYTE  %0101001111110100       ;INY    $3C
  2573 00:F3C9: 5B A2                .DBYTE  %0101101110100010       ;JMP    $3E
  2574 00:F3CB: 5D 26                .DBYTE  %0101110100100110       ;JSR    $40
  2575 00:F3CD: 69 44                .DBYTE  %0110100101000100       ;LDA    $42
  2576 00:F3CF: 69 72                .DBYTE  %0110100101110010       ;LDX    $44
  2577 00:F3D1: 69 74                .DBYTE  %0110100101110100       ;LDY    $46
  2578 00:F3D3: 6D 26                .DBYTE  %0110110100100110       ;LSR    $48
  2579 00:F3D5: 7C 22                .DBYTE  %0111110000100010       ;NOP    $4A
  2580 00:F3D7: 84 C4                .DBYTE  %1000010011000100       ;ORA    $4C
  2581 00:F3D9: 8A 44                .DBYTE  %1000101001000100       ;PHA    $4E
  2582 00:F3DB: 8A 62                .DBYTE  %1000101001100010       ;PHP    $50
  2583 00:F3DD: 8A 72                .DBYTE  %1000101001110010       ;PHX    $52
  2584 00:F3DF: 8A 74                .DBYTE  %1000101001110100       ;PHY    $54
  2585 00:F3E1: 8B 44                .DBYTE  %1000101101000100       ;PLA    $56
  2586 00:F3E3: 8B 62                .DBYTE  %1000101101100010       ;PLP    $58
  2587 00:F3E5: 8B 72                .DBYTE  %1000101101110010       ;PLX    $5A
  2588 00:F3E7: 8B 74                .DBYTE  %1000101101110100       ;PLY    $5C
  2589 00:F3E9: 9B 86                .DBYTE  %1001101110000110       ;RMB    $5E
  2590 00:F3EB: 9C 1A                .DBYTE  %1001110000011010       ;ROL    $60
  2591 00:F3ED: 9C 26                .DBYTE  %1001110000100110       ;ROR    $62
  2592 00:F3EF: 9D 54                .DBYTE  %1001110101010100       ;RTI    $64
  2593 00:F3F1: 9D 68                .DBYTE  %1001110101101000       ;RTS    $66
  2594 00:F3F3: A0 C8                .DBYTE  %1010000011001000       ;SBC    $68
  2595 00:F3F5: A1 88                .DBYTE  %1010000110001000       ;SEC    $6A
  2596 00:F3F7: A1 8A                .DBYTE  %1010000110001010       ;SED    $6C
  2597 00:F3F9: A1 94                .DBYTE  %1010000110010100       ;SEI    $6E
  2598 00:F3FB: A3 86                .DBYTE  %1010001110000110       ;SMB    $70
  2599 00:F3FD: A5 44                .DBYTE  %1010010101000100       ;STA    $72
  2600 00:F3FF: A5 62                .DBYTE  %1010010101100010       ;STP    $74
  2601 00:F401: A5 72                .DBYTE  %1010010101110010       ;STX    $76
  2602 00:F403: A5 74                .DBYTE  %1010010101110100       ;STY    $78
  2603 00:F405: A5 76                .DBYTE  %1010010101110110       ;STZ    $7A
  Mon Feb 11 2019 10:21                                                                                                    Page 48


  2604 00:F407: A8 B2                .DBYTE  %1010100010110010       ;TAX    $7C
  2605 00:F409: A8 B4                .DBYTE  %1010100010110100       ;TAY    $7E
  2606 00:F40B: AC E8                .DBYTE  %1010110011101000       ;TRB    $80
  2607 00:F40D: AD 06                .DBYTE  %1010110100000110       ;TSB    $82
  2608 00:F40F: AD 32                .DBYTE  %1010110100110010       ;TSX    $84
  2609 00:F411: AE 44                .DBYTE  %1010111001000100       ;TXA    $86
  2610 00:F413: AE 68                .DBYTE  %1010111001101000       ;TXS    $88
  2611 00:F415: AE 84                .DBYTE  %1010111010000100       ;TYA    $8A
  2612 00:F417: C0 94                .DBYTE  %1100000010010100       ;WAI    $8C
  2613                        ;
  2614                        ;END OF DISASSEMBLER DATA
  2615                        ;**************************************************************************************************
  2616                        ;END OF MONITOR DATA
  2617                                .END


      Lines assembled: 2617
      Errors: 0
